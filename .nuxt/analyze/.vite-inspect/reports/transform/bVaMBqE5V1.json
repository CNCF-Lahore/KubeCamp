{
  "resolvedId": "/workspace/Kubernetes-Bootcamp/node_modules/engine.io-client/build/esm/transport.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { decodePacket } from \"engine.io-parser\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { installTimerFunctions } from \"./util.js\";\nimport { encode } from \"./contrib/parseqs.js\";\nexport class TransportError extends Error {\n    constructor(reason, description, context) {\n        super(reason);\n        this.description = description;\n        this.context = context;\n        this.type = \"TransportError\";\n    }\n}\nexport class Transport extends Emitter {\n    /**\n     * Transport abstract constructor.\n     *\n     * @param {Object} opts - options\n     * @protected\n     */\n    constructor(opts) {\n        super();\n        this.writable = false;\n        installTimerFunctions(this, opts);\n        this.opts = opts;\n        this.query = opts.query;\n        this.socket = opts.socket;\n    }\n    /**\n     * Emits an error.\n     *\n     * @param {String} reason\n     * @param description\n     * @param context - the error context\n     * @return {Transport} for chaining\n     * @protected\n     */\n    onError(reason, description, context) {\n        super.emitReserved(\"error\", new TransportError(reason, description, context));\n        return this;\n    }\n    /**\n     * Opens the transport.\n     */\n    open() {\n        this.readyState = \"opening\";\n        this.doOpen();\n        return this;\n    }\n    /**\n     * Closes the transport.\n     */\n    close() {\n        if (this.readyState === \"opening\" || this.readyState === \"open\") {\n            this.doClose();\n            this.onClose();\n        }\n        return this;\n    }\n    /**\n     * Sends multiple packets.\n     *\n     * @param {Array} packets\n     */\n    send(packets) {\n        if (this.readyState === \"open\") {\n            this.write(packets);\n        }\n        else {\n            // this might happen if the transport was silently closed in the beforeunload event handler\n        }\n    }\n    /**\n     * Called upon open\n     *\n     * @protected\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        this.writable = true;\n        super.emitReserved(\"open\");\n    }\n    /**\n     * Called with data.\n     *\n     * @param {String} data\n     * @protected\n     */\n    onData(data) {\n        const packet = decodePacket(data, this.socket.binaryType);\n        this.onPacket(packet);\n    }\n    /**\n     * Called with a decoded packet.\n     *\n     * @protected\n     */\n    onPacket(packet) {\n        super.emitReserved(\"packet\", packet);\n    }\n    /**\n     * Called upon close.\n     *\n     * @protected\n     */\n    onClose(details) {\n        this.readyState = \"closed\";\n        super.emitReserved(\"close\", details);\n    }\n    /**\n     * Pauses the transport, in order not to lose packets during an upgrade.\n     *\n     * @param onPause\n     */\n    pause(onPause) { }\n    createUri(schema, query = {}) {\n        return (schema +\n            \"://\" +\n            this._hostname() +\n            this._port() +\n            this.opts.path +\n            this._query(query));\n    }\n    _hostname() {\n        const hostname = this.opts.hostname;\n        return hostname.indexOf(\":\") === -1 ? hostname : \"[\" + hostname + \"]\";\n    }\n    _port() {\n        if (this.opts.port &&\n            ((this.opts.secure && Number(this.opts.port !== 443)) ||\n                (!this.opts.secure && Number(this.opts.port) !== 80))) {\n            return \":\" + this.opts.port;\n        }\n        else {\n            return \"\";\n        }\n    }\n    _query(query) {\n        const encodedQuery = encode(query);\n        return encodedQuery.length ? \"?\" + encodedQuery : \"\";\n    }\n}\n",
      "start": 1707990828089,
      "end": 1707990828109,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1707990828109,
      "end": 1707990828109,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1707990828109,
      "end": 1707990828109,
      "order": "pre"
    },
    {
      "name": "pinceau-transforms",
      "result": "import { decodePacket } from \"engine.io-parser\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { installTimerFunctions } from \"./util.js\";\nimport { encode } from \"./contrib/parseqs.js\";\nexport class TransportError extends Error {\n    constructor(reason, description, context) {\n        super(reason);\n        this.description = description;\n        this.context = context;\n        this.type = \"TransportError\";\n    }\n}\nexport class Transport extends Emitter {\n    /**\n     * Transport abstract constructor.\n     *\n     * @param {Object} opts - options\n     * @protected\n     */\n    constructor(opts) {\n        super();\n        this.writable = false;\n        installTimerFunctions(this, opts);\n        this.opts = opts;\n        this.query = opts.query;\n        this.socket = opts.socket;\n    }\n    /**\n     * Emits an error.\n     *\n     * @param {String} reason\n     * @param description\n     * @param context - the error context\n     * @return {Transport} for chaining\n     * @protected\n     */\n    onError(reason, description, context) {\n        super.emitReserved(\"error\", new TransportError(reason, description, context));\n        return this;\n    }\n    /**\n     * Opens the transport.\n     */\n    open() {\n        this.readyState = \"opening\";\n        this.doOpen();\n        return this;\n    }\n    /**\n     * Closes the transport.\n     */\n    close() {\n        if (this.readyState === \"opening\" || this.readyState === \"open\") {\n            this.doClose();\n            this.onClose();\n        }\n        return this;\n    }\n    /**\n     * Sends multiple packets.\n     *\n     * @param {Array} packets\n     */\n    send(packets) {\n        if (this.readyState === \"open\") {\n            this.write(packets);\n        }\n        else {\n            // this might happen if the transport was silently closed in the beforeunload event handler\n        }\n    }\n    /**\n     * Called upon open\n     *\n     * @protected\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        this.writable = true;\n        super.emitReserved(\"open\");\n    }\n    /**\n     * Called with data.\n     *\n     * @param {String} data\n     * @protected\n     */\n    onData(data) {\n        const packet = decodePacket(data, this.socket.binaryType);\n        this.onPacket(packet);\n    }\n    /**\n     * Called with a decoded packet.\n     *\n     * @protected\n     */\n    onPacket(packet) {\n        super.emitReserved(\"packet\", packet);\n    }\n    /**\n     * Called upon close.\n     *\n     * @protected\n     */\n    onClose(details) {\n        this.readyState = \"closed\";\n        super.emitReserved(\"close\", details);\n    }\n    /**\n     * Pauses the transport, in order not to lose packets during an upgrade.\n     *\n     * @param onPause\n     */\n    pause(onPause) { }\n    createUri(schema, query = {}) {\n        return (schema +\n            \"://\" +\n            this._hostname() +\n            this._port() +\n            this.opts.path +\n            this._query(query));\n    }\n    _hostname() {\n        const hostname = this.opts.hostname;\n        return hostname.indexOf(\":\") === -1 ? hostname : \"[\" + hostname + \"]\";\n    }\n    _port() {\n        if (this.opts.port &&\n            ((this.opts.secure && Number(this.opts.port !== 443)) ||\n                (!this.opts.secure && Number(this.opts.port) !== 80))) {\n            return \":\" + this.opts.port;\n        }\n        else {\n            return \"\";\n        }\n    }\n    _query(query) {\n        const encodedQuery = encode(query);\n        return encodedQuery.length ? \"?\" + encodedQuery : \"\";\n    }\n}\n",
      "start": 1707990828109,
      "end": 1707990828109,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1707990828109,
      "end": 1707990828109,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1707990828109,
      "end": 1707990828109,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1707990828109,
      "end": 1707990828109,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1707990828109,
      "end": 1707990828109,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1707990828109,
      "end": 1707990828109,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1707990828109,
      "end": 1707990828109,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1707990828109,
      "end": 1707990828109,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1707990828109,
      "end": 1707990828110,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707990828110,
      "end": 1707990828110,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1707990828110,
      "end": 1707990828110,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1707990828110,
      "end": 1707990828110,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1707990828110,
      "end": 1707990828110,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707990828110,
      "end": 1707990828110,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1707990828110,
      "end": 1707990828110,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1707990828110,
      "end": 1707990828110,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1707990828110,
      "end": 1707990828110,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1707990828110,
      "end": 1707990828110,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1707990828110,
      "end": 1707990828110,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1707990828110,
      "end": 1707990828110,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1707990828110,
      "end": 1707990828110,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1707990828110,
      "end": 1707990828110,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1707990828110,
      "end": 1707990828110,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1707990828110,
      "end": 1707990828110,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1707990828110,
      "end": 1707990828110,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1707990828110,
      "end": 1707990828110,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1707990828110,
      "end": 1707990828110,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1707990828110,
      "end": 1707990828110,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1707990828110,
      "end": 1707990828110,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1707990828110,
      "end": 1707990828110,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1707990828110,
      "end": 1707990828110,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1707990828110,
      "end": 1707990828110,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1707990828110,
      "end": 1707990828110,
      "order": "normal"
    }
  ]
}
