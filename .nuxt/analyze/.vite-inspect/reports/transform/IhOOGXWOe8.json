{
  "resolvedId": "/workspace/Kubernetes-Bootcamp/node_modules/@nuxt/content/dist/runtime/components/ContentQuery.vue?nuxt_component=async&nuxt_component_name=ContentQuery",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "<script>\nimport { hash } from \"ohash\";\nimport { toRefs, defineComponent, h, useSlots, watch } from \"vue\";\nimport { computed, useAsyncData, queryContent, useRuntimeConfig } from \"#imports\";\nconst ContentQuery = defineComponent({\n  name: \"ContentQuery\",\n  props: {\n    /**\n     * The path of the content to load from content source.\n     */\n    path: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Select a subset of fields\n     */\n    only: {\n      type: Array,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Remove a subset of fields\n     */\n    without: {\n      type: Array,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Filter results\n     */\n    where: {\n      type: Object,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Sort results\n     */\n    sort: {\n      type: Object,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Limit number of results\n     */\n    limit: {\n      type: Number,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Skip number of results\n     */\n    skip: {\n      type: Number,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Filter contents based on locale\n     */\n    locale: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    /**\n     * A type of query to be made.\n     */\n    find: {\n      type: String,\n      required: false,\n      default: void 0\n    }\n  },\n  async setup(props) {\n    const {\n      path,\n      only,\n      without,\n      where,\n      sort,\n      limit,\n      skip,\n      locale,\n      find\n    } = toRefs(props);\n    const isPartial = computed(() => path.value?.includes(\"/_\"));\n    const legacy = !useRuntimeConfig().public.content.experimental.advanceQuery;\n    watch(() => props, () => refresh(), { deep: true });\n    const resolveResult = (result) => {\n      if (legacy) {\n        if (result?.surround) {\n          return result.surround;\n        }\n        return result?._id || Array.isArray(result) ? result : result?.result;\n      }\n      return result.result;\n    };\n    const { data, refresh } = await useAsyncData(\n      `content-query-${hash(props)}`,\n      () => {\n        let queryBuilder;\n        if (path.value) {\n          queryBuilder = queryContent(path.value);\n        } else {\n          queryBuilder = queryContent();\n        }\n        if (only.value) {\n          queryBuilder = queryBuilder.only(only.value);\n        }\n        if (without.value) {\n          queryBuilder = queryBuilder.without(without.value);\n        }\n        if (where.value) {\n          queryBuilder = queryBuilder.where(where.value);\n        }\n        if (sort.value) {\n          queryBuilder = queryBuilder.sort(sort.value);\n        }\n        if (limit.value) {\n          queryBuilder = queryBuilder.limit(limit.value);\n        }\n        if (skip.value) {\n          queryBuilder = queryBuilder.skip(skip.value);\n        }\n        if (locale.value) {\n          queryBuilder = queryBuilder.where({ _locale: locale.value });\n        }\n        if (find.value === \"one\") {\n          return queryBuilder.findOne().then(resolveResult);\n        }\n        if (find.value === \"surround\") {\n          if (!path.value) {\n            console.warn(\"[Content] Surround queries requires `path` prop to be set.\");\n            console.warn(\"[Content] Query without `path` will return regular `find()` results.\");\n            return queryBuilder.find().then(resolveResult);\n          }\n          if (legacy) {\n            return queryBuilder.findSurround(path.value);\n          } else {\n            return queryBuilder.withSurround(path.value).findOne().then(resolveResult);\n          }\n        }\n        return queryBuilder.find().then(resolveResult);\n      }\n    );\n    return {\n      isPartial,\n      data,\n      refresh\n    };\n  },\n  /**\n   * Content not found fallback\n   * @slot not-found\n   */\n  render(ctx) {\n    const slots = useSlots();\n    const {\n      // Setup\n      data,\n      refresh,\n      isPartial,\n      // Props\n      path,\n      only,\n      without,\n      where,\n      sort,\n      limit,\n      skip,\n      locale,\n      find\n    } = ctx;\n    const props = {\n      path,\n      only,\n      without,\n      where,\n      sort,\n      limit,\n      skip,\n      locale,\n      find\n    };\n    if (props.find === \"one\") {\n      if (!data && slots?.[\"not-found\"]) {\n        return slots[\"not-found\"]({ props, ...this.$attrs });\n      }\n      if (slots?.empty && data?._type === \"markdown\" && !data?.body?.children.length) {\n        return slots.empty({ props, ...this.$attrs });\n      }\n    } else if (!data || !data.length) {\n      if (slots?.[\"not-found\"]) {\n        return slots[\"not-found\"]({ props, ...this.$attrs });\n      }\n    }\n    if (slots?.default) {\n      return slots.default({ data, refresh, isPartial, props, ...this.$attrs });\n    }\n    const emptyNode = (slot, data2) => h(\"pre\", null, JSON.stringify({ message: \"You should use slots with <ContentQuery>!\", slot, data: data2 }, null, 2));\n    return emptyNode(\"default\", { data, props, isPartial });\n  }\n});\nexport default ContentQuery;\n</script>\n",
      "start": 1708190394687,
      "end": 1708190394861,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1708190394861,
      "end": 1708190394861,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1708190394861,
      "end": 1708190394861,
      "order": "pre"
    },
    {
      "name": "pinceau-transforms",
      "start": 1708190394861,
      "end": 1708190394861,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1708190394861,
      "end": 1708190394861,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1708190394861,
      "end": 1708190394861,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1708190394861,
      "end": 1708190394861,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1708190394861,
      "end": 1708190394861,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1708190394861,
      "end": 1708190394861,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1708190394861,
      "end": 1708190394861,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "result": "\nimport { hash } from \"ohash\";\nimport { toRefs, defineComponent, h, useSlots, watch } from \"vue\";\nimport { computed, useAsyncData, queryContent, useRuntimeConfig } from \"#imports\";\nconst ContentQuery = defineComponent({\n  name: \"ContentQuery\",\n  props: {\n    /**\n     * The path of the content to load from content source.\n     */\n    path: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Select a subset of fields\n     */\n    only: {\n      type: Array,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Remove a subset of fields\n     */\n    without: {\n      type: Array,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Filter results\n     */\n    where: {\n      type: Object,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Sort results\n     */\n    sort: {\n      type: Object,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Limit number of results\n     */\n    limit: {\n      type: Number,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Skip number of results\n     */\n    skip: {\n      type: Number,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Filter contents based on locale\n     */\n    locale: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    /**\n     * A type of query to be made.\n     */\n    find: {\n      type: String,\n      required: false,\n      default: void 0\n    }\n  },\n  async setup(props) {\n    const {\n      path,\n      only,\n      without,\n      where,\n      sort,\n      limit,\n      skip,\n      locale,\n      find\n    } = toRefs(props);\n    const isPartial = computed(() => path.value?.includes(\"/_\"));\n    const legacy = !useRuntimeConfig().public.content.experimental.advanceQuery;\n    watch(() => props, () => refresh(), { deep: true });\n    const resolveResult = (result) => {\n      if (legacy) {\n        if (result?.surround) {\n          return result.surround;\n        }\n        return result?._id || Array.isArray(result) ? result : result?.result;\n      }\n      return result.result;\n    };\n    const { data, refresh } = await useAsyncData(\n      `content-query-${hash(props)}`,\n      () => {\n        let queryBuilder;\n        if (path.value) {\n          queryBuilder = queryContent(path.value);\n        } else {\n          queryBuilder = queryContent();\n        }\n        if (only.value) {\n          queryBuilder = queryBuilder.only(only.value);\n        }\n        if (without.value) {\n          queryBuilder = queryBuilder.without(without.value);\n        }\n        if (where.value) {\n          queryBuilder = queryBuilder.where(where.value);\n        }\n        if (sort.value) {\n          queryBuilder = queryBuilder.sort(sort.value);\n        }\n        if (limit.value) {\n          queryBuilder = queryBuilder.limit(limit.value);\n        }\n        if (skip.value) {\n          queryBuilder = queryBuilder.skip(skip.value);\n        }\n        if (locale.value) {\n          queryBuilder = queryBuilder.where({ _locale: locale.value });\n        }\n        if (find.value === \"one\") {\n          return queryBuilder.findOne().then(resolveResult);\n        }\n        if (find.value === \"surround\") {\n          if (!path.value) {\n            console.warn(\"[Content] Surround queries requires `path` prop to be set.\");\n            console.warn(\"[Content] Query without `path` will return regular `find()` results.\");\n            return queryBuilder.find().then(resolveResult);\n          }\n          if (legacy) {\n            return queryBuilder.findSurround(path.value);\n          } else {\n            return queryBuilder.withSurround(path.value).findOne().then(resolveResult);\n          }\n        }\n        return queryBuilder.find().then(resolveResult);\n      }\n    );\n    return {\n      isPartial,\n      data,\n      refresh\n    };\n  },\n  /**\n   * Content not found fallback\n   * @slot not-found\n   */\n  render(ctx) {\n    const slots = useSlots();\n    const {\n      // Setup\n      data,\n      refresh,\n      isPartial,\n      // Props\n      path,\n      only,\n      without,\n      where,\n      sort,\n      limit,\n      skip,\n      locale,\n      find\n    } = ctx;\n    const props = {\n      path,\n      only,\n      without,\n      where,\n      sort,\n      limit,\n      skip,\n      locale,\n      find\n    };\n    if (props.find === \"one\") {\n      if (!data && slots?.[\"not-found\"]) {\n        return slots[\"not-found\"]({ props, ...this.$attrs });\n      }\n      if (slots?.empty && data?._type === \"markdown\" && !data?.body?.children.length) {\n        return slots.empty({ props, ...this.$attrs });\n      }\n    } else if (!data || !data.length) {\n      if (slots?.[\"not-found\"]) {\n        return slots[\"not-found\"]({ props, ...this.$attrs });\n      }\n    }\n    if (slots?.default) {\n      return slots.default({ data, refresh, isPartial, props, ...this.$attrs });\n    }\n    const emptyNode = (slot, data2) => h(\"pre\", null, JSON.stringify({ message: \"You should use slots with <ContentQuery>!\", slot, data: data2 }, null, 2));\n    return emptyNode(\"default\", { data, props, isPartial });\n  }\n});\nconst _sfc_main = ContentQuery;\n\n\n\n\nexport default _sfc_main",
      "start": 1708190394861,
      "end": 1708190394863,
      "order": "normal",
      "sourcemaps": {
        "mappings": ""
      }
    },
    {
      "name": "vite:vue-jsx",
      "start": 1708190394863,
      "end": 1708190394863,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1708190394863,
      "end": 1708190394863,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1708190394863,
      "end": 1708190394863,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1708190394863,
      "end": 1708190394863,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "result": "import { defineAsyncComponent } from \"vue\"\nexport default defineAsyncComponent(() => import(\"/workspace/Kubernetes-Bootcamp/node_modules/@nuxt/content/dist/runtime/components/ContentQuery.vue\").then(r => r.default))",
      "start": 1708190394863,
      "end": 1708190394864,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "replace",
      "start": 1708190394864,
      "end": 1708190394864,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1708190394864,
      "end": 1708190394864,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1708190394864,
      "end": 1708190394864,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1708190394864,
      "end": 1708190394864,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1708190394864,
      "end": 1708190394864,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1708190394864,
      "end": 1708190394864,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1708190394864,
      "end": 1708190394864,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1708190394864,
      "end": 1708190394864,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1708190394864,
      "end": 1708190394864,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1708190394864,
      "end": 1708190394864,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1708190394864,
      "end": 1708190394864,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1708190394864,
      "end": 1708190394864,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1708190394864,
      "end": 1708190394864,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1708190394864,
      "end": 1708190394864,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1708190394864,
      "end": 1708190394864,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1708190394864,
      "end": 1708190394864,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1708190394864,
      "end": 1708190394864,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1708190394864,
      "end": 1708190394864,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "result": "import { __vitePreload } from \"\u0000vite/preload-helper.js\";import { defineAsyncComponent } from \"vue\"\nexport default defineAsyncComponent(() => __vitePreload(() => import(\"/workspace/Kubernetes-Bootcamp/node_modules/@nuxt/content/dist/runtime/components/ContentQuery.vue\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url).then(r => r.default))",
      "start": 1708190394864,
      "end": 1708190394864,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:reporter",
      "start": 1708190394864,
      "end": 1708190394864,
      "order": "normal"
    }
  ]
}
