{
  "resolvedId": "/workspace/Kubernetes-Bootcamp/node_modules/engine.io-client/build/esm/transports/websocket.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { Transport } from \"../transport.js\";\nimport { yeast } from \"../contrib/yeast.js\";\nimport { pick } from \"../util.js\";\nimport { nextTick, usingBrowserWebSocket, WebSocket, } from \"./websocket-constructor.js\";\nimport { encodePacket } from \"engine.io-parser\";\n// detect ReactNative environment\nconst isReactNative = typeof navigator !== \"undefined\" &&\n    typeof navigator.product === \"string\" &&\n    navigator.product.toLowerCase() === \"reactnative\";\nexport class WS extends Transport {\n    /**\n     * WebSocket transport constructor.\n     *\n     * @param {Object} opts - connection options\n     * @protected\n     */\n    constructor(opts) {\n        super(opts);\n        this.supportsBinary = !opts.forceBase64;\n    }\n    get name() {\n        return \"websocket\";\n    }\n    doOpen() {\n        if (!this.check()) {\n            // let probe timeout\n            return;\n        }\n        const uri = this.uri();\n        const protocols = this.opts.protocols;\n        // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n        const opts = isReactNative\n            ? {}\n            : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n        if (this.opts.extraHeaders) {\n            opts.headers = this.opts.extraHeaders;\n        }\n        try {\n            this.ws =\n                usingBrowserWebSocket && !isReactNative\n                    ? protocols\n                        ? new WebSocket(uri, protocols)\n                        : new WebSocket(uri)\n                    : new WebSocket(uri, protocols, opts);\n        }\n        catch (err) {\n            return this.emitReserved(\"error\", err);\n        }\n        this.ws.binaryType = this.socket.binaryType;\n        this.addEventListeners();\n    }\n    /**\n     * Adds event listeners to the socket\n     *\n     * @private\n     */\n    addEventListeners() {\n        this.ws.onopen = () => {\n            if (this.opts.autoUnref) {\n                this.ws._socket.unref();\n            }\n            this.onOpen();\n        };\n        this.ws.onclose = (closeEvent) => this.onClose({\n            description: \"websocket connection closed\",\n            context: closeEvent,\n        });\n        this.ws.onmessage = (ev) => this.onData(ev.data);\n        this.ws.onerror = (e) => this.onError(\"websocket error\", e);\n    }\n    write(packets) {\n        this.writable = false;\n        // encodePacket efficient as it uses WS framing\n        // no need for encodePayload\n        for (let i = 0; i < packets.length; i++) {\n            const packet = packets[i];\n            const lastPacket = i === packets.length - 1;\n            encodePacket(packet, this.supportsBinary, (data) => {\n                // always create a new object (GH-437)\n                const opts = {};\n                if (!usingBrowserWebSocket) {\n                    if (packet.options) {\n                        opts.compress = packet.options.compress;\n                    }\n                    if (this.opts.perMessageDeflate) {\n                        const len = \n                        // @ts-ignore\n                        \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n                        if (len < this.opts.perMessageDeflate.threshold) {\n                            opts.compress = false;\n                        }\n                    }\n                }\n                // Sometimes the websocket has already been closed but the browser didn't\n                // have a chance of informing us about it yet, in that case send will\n                // throw an error\n                try {\n                    if (usingBrowserWebSocket) {\n                        // TypeError is thrown when passing the second argument on Safari\n                        this.ws.send(data);\n                    }\n                    else {\n                        this.ws.send(data, opts);\n                    }\n                }\n                catch (e) {\n                }\n                if (lastPacket) {\n                    // fake drain\n                    // defer to next tick to allow Socket to clear writeBuffer\n                    nextTick(() => {\n                        this.writable = true;\n                        this.emitReserved(\"drain\");\n                    }, this.setTimeoutFn);\n                }\n            });\n        }\n    }\n    doClose() {\n        if (typeof this.ws !== \"undefined\") {\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n    uri() {\n        const schema = this.opts.secure ? \"wss\" : \"ws\";\n        const query = this.query || {};\n        // append timestamp to URI\n        if (this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = yeast();\n        }\n        // communicate binary support capabilities\n        if (!this.supportsBinary) {\n            query.b64 = 1;\n        }\n        return this.createUri(schema, query);\n    }\n    /**\n     * Feature detection for WebSocket.\n     *\n     * @return {Boolean} whether this transport is available.\n     * @private\n     */\n    check() {\n        return !!WebSocket;\n    }\n}\n",
      "start": 1709670071956,
      "end": 1709670071967,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709670071967,
      "end": 1709670071967,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709670071967,
      "end": 1709670071967,
      "order": "pre"
    },
    {
      "name": "pinceau-transforms",
      "result": "import { Transport } from \"../transport.js\";\nimport { yeast } from \"../contrib/yeast.js\";\nimport { pick } from \"../util.js\";\nimport { nextTick, usingBrowserWebSocket, WebSocket, } from \"./websocket-constructor.js\";\nimport { encodePacket } from \"engine.io-parser\";\n// detect ReactNative environment\nconst isReactNative = typeof navigator !== \"undefined\" &&\n    typeof navigator.product === \"string\" &&\n    navigator.product.toLowerCase() === \"reactnative\";\nexport class WS extends Transport {\n    /**\n     * WebSocket transport constructor.\n     *\n     * @param {Object} opts - connection options\n     * @protected\n     */\n    constructor(opts) {\n        super(opts);\n        this.supportsBinary = !opts.forceBase64;\n    }\n    get name() {\n        return \"websocket\";\n    }\n    doOpen() {\n        if (!this.check()) {\n            // let probe timeout\n            return;\n        }\n        const uri = this.uri();\n        const protocols = this.opts.protocols;\n        // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n        const opts = isReactNative\n            ? {}\n            : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n        if (this.opts.extraHeaders) {\n            opts.headers = this.opts.extraHeaders;\n        }\n        try {\n            this.ws =\n                usingBrowserWebSocket && !isReactNative\n                    ? protocols\n                        ? new WebSocket(uri, protocols)\n                        : new WebSocket(uri)\n                    : new WebSocket(uri, protocols, opts);\n        }\n        catch (err) {\n            return this.emitReserved(\"error\", err);\n        }\n        this.ws.binaryType = this.socket.binaryType;\n        this.addEventListeners();\n    }\n    /**\n     * Adds event listeners to the socket\n     *\n     * @private\n     */\n    addEventListeners() {\n        this.ws.onopen = () => {\n            if (this.opts.autoUnref) {\n                this.ws._socket.unref();\n            }\n            this.onOpen();\n        };\n        this.ws.onclose = (closeEvent) => this.onClose({\n            description: \"websocket connection closed\",\n            context: closeEvent,\n        });\n        this.ws.onmessage = (ev) => this.onData(ev.data);\n        this.ws.onerror = (e) => this.onError(\"websocket error\", e);\n    }\n    write(packets) {\n        this.writable = false;\n        // encodePacket efficient as it uses WS framing\n        // no need for encodePayload\n        for (let i = 0; i < packets.length; i++) {\n            const packet = packets[i];\n            const lastPacket = i === packets.length - 1;\n            encodePacket(packet, this.supportsBinary, (data) => {\n                // always create a new object (GH-437)\n                const opts = {};\n                if (!usingBrowserWebSocket) {\n                    if (packet.options) {\n                        opts.compress = packet.options.compress;\n                    }\n                    if (this.opts.perMessageDeflate) {\n                        const len = \n                        // @ts-ignore\n                        \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n                        if (len < this.opts.perMessageDeflate.threshold) {\n                            opts.compress = false;\n                        }\n                    }\n                }\n                // Sometimes the websocket has already been closed but the browser didn't\n                // have a chance of informing us about it yet, in that case send will\n                // throw an error\n                try {\n                    if (usingBrowserWebSocket) {\n                        // TypeError is thrown when passing the second argument on Safari\n                        this.ws.send(data);\n                    }\n                    else {\n                        this.ws.send(data, opts);\n                    }\n                }\n                catch (e) {\n                }\n                if (lastPacket) {\n                    // fake drain\n                    // defer to next tick to allow Socket to clear writeBuffer\n                    nextTick(() => {\n                        this.writable = true;\n                        this.emitReserved(\"drain\");\n                    }, this.setTimeoutFn);\n                }\n            });\n        }\n    }\n    doClose() {\n        if (typeof this.ws !== \"undefined\") {\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n    uri() {\n        const schema = this.opts.secure ? \"wss\" : \"ws\";\n        const query = this.query || {};\n        // append timestamp to URI\n        if (this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = yeast();\n        }\n        // communicate binary support capabilities\n        if (!this.supportsBinary) {\n            query.b64 = 1;\n        }\n        return this.createUri(schema, query);\n    }\n    /**\n     * Feature detection for WebSocket.\n     *\n     * @return {Boolean} whether this transport is available.\n     * @private\n     */\n    check() {\n        return !!WebSocket;\n    }\n}\n",
      "start": 1709670071967,
      "end": 1709670071967,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1709670071967,
      "end": 1709670071967,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709670071967,
      "end": 1709670071967,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709670071967,
      "end": 1709670071967,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709670071967,
      "end": 1709670071967,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709670071967,
      "end": 1709670071967,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709670071967,
      "end": 1709670071967,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709670071967,
      "end": 1709670071967,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709670071967,
      "end": 1709670071967,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709670071967,
      "end": 1709670071967,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709670071967,
      "end": 1709670071967,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709670071967,
      "end": 1709670071967,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709670071967,
      "end": 1709670071967,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709670071967,
      "end": 1709670071967,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709670071967,
      "end": 1709670071967,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709670071967,
      "end": 1709670071967,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709670071967,
      "end": 1709670071967,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709670071967,
      "end": 1709670071967,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709670071967,
      "end": 1709670071967,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709670071967,
      "end": 1709670071967,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709670071967,
      "end": 1709670071968,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709670071968,
      "end": 1709670071968,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709670071968,
      "end": 1709670071968,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709670071968,
      "end": 1709670071968,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709670071968,
      "end": 1709670071968,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709670071968,
      "end": 1709670071968,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709670071968,
      "end": 1709670071968,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709670071968,
      "end": 1709670071968,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709670071968,
      "end": 1709670071968,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709670071968,
      "end": 1709670071968,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709670071968,
      "end": 1709670071968,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709670071968,
      "end": 1709670071968,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709670071968,
      "end": 1709670071968,
      "order": "normal"
    }
  ]
}
