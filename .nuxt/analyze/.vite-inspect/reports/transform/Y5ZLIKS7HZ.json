{
  "resolvedId": "/workspace/Kubernetes-Bootcamp/node_modules/@nuxt-themes/elements/components/globals/List.vue?vue&type=script&lang.ts",
  "transforms": [
    {
      "name": "vite:vue",
      "result": "\nconst iconTypeMap = {\n  primary: 'heroicons-outline:check',\n  info: 'heroicons-outline:information-circle',\n  success: 'heroicons-outline:check-circle',\n  warning: 'heroicons-outline:exclamation',\n  danger: 'heroicons-outline:exclamation-circle'\n}\n\nexport default defineComponent({\n  props: {\n    /**\n     * Used to override the default <code>type</code> icon, check out the\n     *  <a href=\"https://github.com/nuxt/content/tree/dev/packages/theme-docs/src/components/global/icons\">icons available</a>\n     */\n    icon: {\n      type: String,\n      default: null\n    },\n    /**\n     * Type of list\n     */\n    type: {\n      type: String,\n      default: 'primary',\n      validator: (value: string) => ['primary', 'info', 'success', 'warning', 'danger'].includes(value)\n    }\n  },\n  setup (props) {\n    const slots = useSlots()\n\n    const { flatUnwrap, unwrap } = useUnwrap()\n\n    const iconName = computed(() => props.icon || (iconTypeMap as any)[props.type])\n\n    // Usage of render function is mandatory to access default slot\n    // Otherwise Vue warns that slot \"default\" was invoked outside of the render function\n    return () => {\n      const items = flatUnwrap((slots.default && slots.default()) ?? [], ['ul']).map(li => unwrap(li, ['li']))\n\n      return h(\n        'ul',\n        items.map(item =>\n          h('li', [\n            h('span', { class: `list-icon ${props.type}` }, h(resolveComponent('icon'), { name: iconName.value, class: 'icon' })),\n            h('span', h(resolveComponent('MDCSlot'), { use: () => item }))\n          ])\n        )\n      )\n    }\n  }\n})\n",
      "start": 1707500038975,
      "end": 1707500038975
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1707500038975,
      "end": 1707500038975,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1707500038978,
      "end": 1707500038978,
      "order": "pre"
    },
    {
      "name": "pinceau-transforms",
      "result": "\nconst iconTypeMap = {\n  primary: 'heroicons-outline:check',\n  info: 'heroicons-outline:information-circle',\n  success: 'heroicons-outline:check-circle',\n  warning: 'heroicons-outline:exclamation',\n  danger: 'heroicons-outline:exclamation-circle'\n}\n\nexport default defineComponent({\n  props: {\n    /**\n     * Used to override the default <code>type</code> icon, check out the\n     *  <a href=\"https://github.com/nuxt/content/tree/dev/packages/theme-docs/src/components/global/icons\">icons available</a>\n     */\n    icon: {\n      type: String,\n      default: null\n    },\n    /**\n     * Type of list\n     */\n    type: {\n      type: String,\n      default: 'primary',\n      validator: (value: string) => ['primary', 'info', 'success', 'warning', 'danger'].includes(value)\n    }\n  },\n  setup (props) {\n    const slots = useSlots()\n\n    const { flatUnwrap, unwrap } = useUnwrap()\n\n    const iconName = computed(() => props.icon || (iconTypeMap as any)[props.type])\n\n    // Usage of render function is mandatory to access default slot\n    // Otherwise Vue warns that slot \"default\" was invoked outside of the render function\n    return () => {\n      const items = flatUnwrap((slots.default && slots.default()) ?? [], ['ul']).map(li => unwrap(li, ['li']))\n\n      return h(\n        'ul',\n        items.map(item =>\n          h('li', [\n            h('span', { class: `list-icon ${props.type}` }, h(resolveComponent('icon'), { name: iconName.value, class: 'icon' })),\n            h('span', h(resolveComponent('MDCSlot'), { use: () => item }))\n          ])\n        )\n      )\n    }\n  }\n})\n",
      "start": 1707500038982,
      "end": 1707500038982,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1707500038982,
      "end": 1707500038982,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1707500038983,
      "end": 1707500038983,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1707500038983,
      "end": 1707500038983,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "result": "const iconTypeMap = {\n  primary: \"heroicons-outline:check\",\n  info: \"heroicons-outline:information-circle\",\n  success: \"heroicons-outline:check-circle\",\n  warning: \"heroicons-outline:exclamation\",\n  danger: \"heroicons-outline:exclamation-circle\"\n};\nexport default defineComponent({\n  props: {\n    /**\n     * Used to override the default <code>type</code> icon, check out the\n     *  <a href=\"https://github.com/nuxt/content/tree/dev/packages/theme-docs/src/components/global/icons\">icons available</a>\n     */\n    icon: {\n      type: String,\n      default: null\n    },\n    /**\n     * Type of list\n     */\n    type: {\n      type: String,\n      default: \"primary\",\n      validator: (value) => [\"primary\", \"info\", \"success\", \"warning\", \"danger\"].includes(value)\n    }\n  },\n  setup(props) {\n    const slots = useSlots();\n    const { flatUnwrap, unwrap } = useUnwrap();\n    const iconName = computed(() => props.icon || iconTypeMap[props.type]);\n    return () => {\n      const items = flatUnwrap((slots.default && slots.default()) ?? [], [\"ul\"]).map((li) => unwrap(li, [\"li\"]));\n      return h(\n        \"ul\",\n        items.map(\n          (item) => h(\"li\", [\n            h(\"span\", { class: `list-icon ${props.type}` }, h(resolveComponent(\"icon\"), { name: iconName.value, class: \"icon\" })),\n            h(\"span\", h(resolveComponent(\"MDCSlot\"), { use: () => item }))\n          ])\n        )\n      );\n    };\n  }\n});\n",
      "start": 1707500038983,
      "end": 1707500039466,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/workspace/Kubernetes-Bootcamp/node_modules/@nuxt-themes/elements/components/globals/List.vue?vue&type=script&lang.ts"
        ],
        "sourcesContent": [
          "\nconst iconTypeMap = {\n  primary: 'heroicons-outline:check',\n  info: 'heroicons-outline:information-circle',\n  success: 'heroicons-outline:check-circle',\n  warning: 'heroicons-outline:exclamation',\n  danger: 'heroicons-outline:exclamation-circle'\n}\n\nexport default defineComponent({\n  props: {\n    /**\n     * Used to override the default <code>type</code> icon, check out the\n     *  <a href=\"https://github.com/nuxt/content/tree/dev/packages/theme-docs/src/components/global/icons\">icons available</a>\n     */\n    icon: {\n      type: String,\n      default: null\n    },\n    /**\n     * Type of list\n     */\n    type: {\n      type: String,\n      default: 'primary',\n      validator: (value: string) => ['primary', 'info', 'success', 'warning', 'danger'].includes(value)\n    }\n  },\n  setup (props) {\n    const slots = useSlots()\n\n    const { flatUnwrap, unwrap } = useUnwrap()\n\n    const iconName = computed(() => props.icon || (iconTypeMap as any)[props.type])\n\n    // Usage of render function is mandatory to access default slot\n    // Otherwise Vue warns that slot \"default\" was invoked outside of the render function\n    return () => {\n      const items = flatUnwrap((slots.default && slots.default()) ?? [], ['ul']).map(li => unwrap(li, ['li']))\n\n      return h(\n        'ul',\n        items.map(item =>\n          h('li', [\n            h('span', { class: `list-icon ${props.type}` }, h(resolveComponent('icon'), { name: iconName.value, class: 'icon' })),\n            h('span', h(resolveComponent('MDCSlot'), { use: () => item }))\n          ])\n        )\n      )\n    }\n  }\n})\n"
        ],
        "mappings": "AACA,MAAM,cAAc;AAAA,EAClB,SAAS;AAAA,EACT,MAAM;AAAA,EACN,SAAS;AAAA,EACT,SAAS;AAAA,EACT,QAAQ;AACV;AAEA,eAAe,gBAAgB;AAAA,EAC7B,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,IAKL,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA;AAAA;AAAA;AAAA,IAIA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS;AAAA,MACT,WAAW,CAAC,UAAkB,CAAC,WAAW,QAAQ,WAAW,WAAW,QAAQ,EAAE,SAAS,KAAK;AAAA,IAClG;AAAA,EACF;AAAA,EACA,MAAO,OAAO;AACZ,UAAM,QAAQ,SAAS;AAEvB,UAAM,EAAE,YAAY,OAAO,IAAI,UAAU;AAEzC,UAAM,WAAW,SAAS,MAAM,MAAM,QAAS,YAAoB,MAAM,IAAI,CAAC;AAI9E,WAAO,MAAM;AACX,YAAM,QAAQ,YAAY,MAAM,WAAW,MAAM,QAAQ,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,QAAM,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC;AAEvG,aAAO;AAAA,QACL;AAAA,QACA,MAAM;AAAA,UAAI,UACR,EAAE,MAAM;AAAA,YACN,EAAE,QAAQ,EAAE,OAAO,aAAa,MAAM,IAAI,GAAG,GAAG,EAAE,iBAAiB,MAAM,GAAG,EAAE,MAAM,SAAS,OAAO,OAAO,OAAO,CAAC,CAAC;AAAA,YACpH,EAAE,QAAQ,EAAE,iBAAiB,SAAS,GAAG,EAAE,KAAK,MAAM,KAAK,CAAC,CAAC;AAAA,UAC/D,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF,CAAC;",
        "names": []
      }
    },
    {
      "name": "vite:json",
      "start": 1707500039466,
      "end": 1707500039466,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1707500039466,
      "end": 1707500039466,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1707500039466,
      "end": 1707500039466,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1707500039466,
      "end": 1707500039466,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707500039466,
      "end": 1707500039466,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1707500039466,
      "end": 1707500039466,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1707500039466,
      "end": 1707500039466,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1707500039466,
      "end": 1707500039467,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707500039467,
      "end": 1707500039467,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1707500039467,
      "end": 1707500039467,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1707500039467,
      "end": 1707500039467,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1707500039467,
      "end": 1707500039467,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1707500039467,
      "end": 1707500039467,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1707500039467,
      "end": 1707500039467,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1707500039467,
      "end": 1707500039467,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1707500039468,
      "end": 1707500039468,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1707500039468,
      "end": 1707500039468,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1707500039468,
      "end": 1707500039468,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1707500039468,
      "end": 1707500039468,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "result": "import { defineComponent, useSlots, computed, h, resolveComponent } from 'vue';\nimport { useUnwrap } from '/workspace/Kubernetes-Bootcamp/node_modules/@nuxt/content/dist/runtime/composables/useUnwrap';\nconst iconTypeMap = {\n  primary: \"heroicons-outline:check\",\n  info: \"heroicons-outline:information-circle\",\n  success: \"heroicons-outline:check-circle\",\n  warning: \"heroicons-outline:exclamation\",\n  danger: \"heroicons-outline:exclamation-circle\"\n};\nexport default defineComponent({\n  props: {\n    /**\n     * Used to override the default <code>type</code> icon, check out the\n     *  <a href=\"https://github.com/nuxt/content/tree/dev/packages/theme-docs/src/components/global/icons\">icons available</a>\n     */\n    icon: {\n      type: String,\n      default: null\n    },\n    /**\n     * Type of list\n     */\n    type: {\n      type: String,\n      default: \"primary\",\n      validator: (value) => [\"primary\", \"info\", \"success\", \"warning\", \"danger\"].includes(value)\n    }\n  },\n  setup(props) {\n    const slots = useSlots();\n    const { flatUnwrap, unwrap } = useUnwrap();\n    const iconName = computed(() => props.icon || iconTypeMap[props.type]);\n    return () => {\n      const items = flatUnwrap((slots.default && slots.default()) ?? [], [\"ul\"]).map((li) => unwrap(li, [\"li\"]));\n      return h(\n        \"ul\",\n        items.map(\n          (item) => h(\"li\", [\n            h(\"span\", { class: `list-icon ${props.type}` }, h(resolveComponent(\"icon\"), { name: iconName.value, class: \"icon\" })),\n            h(\"span\", h(resolveComponent(\"MDCSlot\"), { use: () => item }))\n          ])\n        )\n      );\n    };\n  }\n});\n",
      "start": 1707500039468,
      "end": 1707500039482,
      "order": "post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrhD,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACznB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzhlB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACll
      }
    },
    {
      "name": "unctx:transform",
      "start": 1707500039482,
      "end": 1707500039482,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1707500039482,
      "end": 1707500039482,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1707500039483,
      "end": 1707500039483,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1707500039483,
      "end": 1707500039483,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "result": "import { default as __nuxt_component_0 } from \"/workspace/Kubernetes-Bootcamp/node_modules/nuxt-icon/dist/runtime/Icon.vue\";\nimport { default as __nuxt_component_1 } from \"/workspace/Kubernetes-Bootcamp/node_modules/@nuxtjs/mdc/dist/runtime/components/MDCSlot\";\nimport { defineComponent, useSlots, computed, h, resolveComponent } from 'vue';\nimport { useUnwrap } from '/workspace/Kubernetes-Bootcamp/node_modules/@nuxt/content/dist/runtime/composables/useUnwrap';\nconst iconTypeMap = {\n  primary: \"heroicons-outline:check\",\n  info: \"heroicons-outline:information-circle\",\n  success: \"heroicons-outline:check-circle\",\n  warning: \"heroicons-outline:exclamation\",\n  danger: \"heroicons-outline:exclamation-circle\"\n};\nexport default defineComponent({\n  props: {\n    /**\n     * Used to override the default <code>type</code> icon, check out the\n     *  <a href=\"https://github.com/nuxt/content/tree/dev/packages/theme-docs/src/components/global/icons\">icons available</a>\n     */\n    icon: {\n      type: String,\n      default: null\n    },\n    /**\n     * Type of list\n     */\n    type: {\n      type: String,\n      default: \"primary\",\n      validator: (value) => [\"primary\", \"info\", \"success\", \"warning\", \"danger\"].includes(value)\n    }\n  },\n  setup(props) {\n    const slots = useSlots();\n    const { flatUnwrap, unwrap } = useUnwrap();\n    const iconName = computed(() => props.icon || iconTypeMap[props.type]);\n    return () => {\n      const items = flatUnwrap((slots.default && slots.default()) ?? [], [\"ul\"]).map((li) => unwrap(li, [\"li\"]));\n      return h(\n        \"ul\",\n        items.map(\n          (item) => h(\"li\", [\n            h(\"span\", { class: `list-icon ${props.type}` }, h(__nuxt_component_0, { name: iconName.value, class: \"icon\" })),\n            h(\"span\", h(__nuxt_component_1, { use: () => item }))\n          ])\n        )\n      );\n    };\n  }\n});\n",
      "start": 1707500039483,
      "end": 1707500039484,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1707500039484,
      "end": 1707500039485,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1707500039485,
      "end": 1707500039485,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1707500039485,
      "end": 1707500039485,
      "order": "normal"
    }
  ]
}
