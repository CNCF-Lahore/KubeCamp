{
  "resolvedId": "/workspace/Kubernetes-Bootcamp/node_modules/@nuxt/content/dist/runtime/components/ContentRenderer.vue",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "<script>\nimport { defineComponent, watch, h, useSlots } from \"vue\";\nimport ContentRendererMarkdown from \"./ContentRendererMarkdown.vue\";\nexport default defineComponent({\n  name: \"ContentRenderer\",\n  props: {\n    /**\n     * The document to render.\n     */\n    value: {\n      type: Object,\n      required: false,\n      default: () => ({})\n    },\n    /**\n     * Whether or not to render the excerpt.\n     * @default false\n     */\n    excerpt: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * The tag to use for the renderer element if it is used.\n     * @default 'div'\n     */\n    tag: {\n      type: String,\n      default: \"div\"\n    }\n  },\n  setup(props) {\n    watch(\n      () => props.excerpt,\n      (newExcerpt) => {\n        if (newExcerpt && !props.value?.excerpt) {\n          console.warn(`No excerpt found for document content/${props?.value?._path}.${props?.value?._extension}!`);\n          console.warn(\"Make sure to use <!--more--> in your content if you want to use excerpt feature.\");\n        }\n      },\n      {\n        immediate: true\n      }\n    );\n  },\n  /**\n   * Content empty fallback\n   * @slot empty\n   */\n  render(ctx) {\n    const slots = useSlots();\n    const { value, excerpt, tag } = ctx;\n    const markdownAST = excerpt ? value?.excerpt : value?.body;\n    if (!markdownAST?.children?.length && slots?.empty) {\n      return slots.empty({ value, excerpt, tag, ...this.$attrs });\n    }\n    if (slots?.default) {\n      return slots.default({ value, excerpt, tag, ...this.$attrs });\n    }\n    if (markdownAST?.type === \"root\" && markdownAST?.children?.length) {\n      return h(\n        ContentRendererMarkdown,\n        {\n          value,\n          excerpt,\n          tag,\n          ...this.$attrs\n        }\n      );\n    }\n    return h(\n      \"pre\",\n      null,\n      JSON.stringify({ message: \"You should use slots with <ContentRenderer>\", value, excerpt, tag }, null, 2)\n    );\n  }\n});\n</script>\n",
      "start": 1708195450496,
      "end": 1708195450674,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1708195450674,
      "end": 1708195450674,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1708195450674,
      "end": 1708195450674,
      "order": "pre"
    },
    {
      "name": "pinceau-transforms",
      "result": "<script>\nimport { defineComponent, watch, h, useSlots } from \"vue\";\nimport ContentRendererMarkdown from \"./ContentRendererMarkdown.vue\";\nexport default defineComponent({\n  name: \"ContentRenderer\",\n  props: {\n    /**\n     * The document to render.\n     */\n    value: {\n      type: Object,\n      required: false,\n      default: () => ({})\n    },\n    /**\n     * Whether or not to render the excerpt.\n     * @default false\n     */\n    excerpt: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * The tag to use for the renderer element if it is used.\n     * @default 'div'\n     */\n    tag: {\n      type: String,\n      default: \"div\"\n    }\n  },\n  setup(props) {\n    watch(\n      () => props.excerpt,\n      (newExcerpt) => {\n        if (newExcerpt && !props.value?.excerpt) {\n          console.warn(`No excerpt found for document content/${props?.value?._path}.${props?.value?._extension}!`);\n          console.warn(\"Make sure to use <!--more--> in your content if you want to use excerpt feature.\");\n        }\n      },\n      {\n        immediate: true\n      }\n    );\n  },\n  /**\n   * Content empty fallback\n   * @slot empty\n   */\n  render(ctx) {\n    const slots = useSlots();\n    const { value, excerpt, tag } = ctx;\n    const markdownAST = excerpt ? value?.excerpt : value?.body;\n    if (!markdownAST?.children?.length && slots?.empty) {\n      return slots.empty({ value, excerpt, tag, ...this.$attrs });\n    }\n    if (slots?.default) {\n      return slots.default({ value, excerpt, tag, ...this.$attrs });\n    }\n    if (markdownAST?.type === \"root\" && markdownAST?.children?.length) {\n      return h(\n        ContentRendererMarkdown,\n        {\n          value,\n          excerpt,\n          tag,\n          ...this.$attrs\n        }\n      );\n    }\n    return h(\n      \"pre\",\n      null,\n      JSON.stringify({ message: \"You should use slots with <ContentRenderer>\", value, excerpt, tag }, null, 2)\n    );\n  }\n});\n</script>\n",
      "start": 1708195450674,
      "end": 1708195450675,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "file": "/workspace/Kubernetes-Bootcamp/node_modules/@nuxt/content/dist/runtime/components/ContentRenderer.vue",
        "sources": [
          "/workspace/Kubernetes-Bootcamp/node_modules/@nuxt/content/dist/runtime/components/ContentRenderer.vue"
        ],
        "names": [],
        "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;"
      }
    },
    {
      "name": "content-slot",
      "start": 1708195450675,
      "end": 1708195450675,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1708195450675,
      "end": 1708195450675,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1708195450675,
      "end": 1708195450675,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1708195450675,
      "end": 1708195450675,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1708195450675,
      "end": 1708195450675,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1708195450675,
      "end": 1708195450675,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "result": "\nimport { defineComponent, watch, h, useSlots } from \"vue\";\nimport ContentRendererMarkdown from \"./ContentRendererMarkdown.vue\";\nconst _sfc_main = defineComponent({\n  name: \"ContentRenderer\",\n  props: {\n    /**\n     * The document to render.\n     */\n    value: {\n      type: Object,\n      required: false,\n      default: () => ({})\n    },\n    /**\n     * Whether or not to render the excerpt.\n     * @default false\n     */\n    excerpt: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * The tag to use for the renderer element if it is used.\n     * @default 'div'\n     */\n    tag: {\n      type: String,\n      default: \"div\"\n    }\n  },\n  setup(props) {\n    watch(\n      () => props.excerpt,\n      (newExcerpt) => {\n        if (newExcerpt && !props.value?.excerpt) {\n          console.warn(`No excerpt found for document content/${props?.value?._path}.${props?.value?._extension}!`);\n          console.warn(\"Make sure to use <!--more--> in your content if you want to use excerpt feature.\");\n        }\n      },\n      {\n        immediate: true\n      }\n    );\n  },\n  /**\n   * Content empty fallback\n   * @slot empty\n   */\n  render(ctx) {\n    const slots = useSlots();\n    const { value, excerpt, tag } = ctx;\n    const markdownAST = excerpt ? value?.excerpt : value?.body;\n    if (!markdownAST?.children?.length && slots?.empty) {\n      return slots.empty({ value, excerpt, tag, ...this.$attrs });\n    }\n    if (slots?.default) {\n      return slots.default({ value, excerpt, tag, ...this.$attrs });\n    }\n    if (markdownAST?.type === \"root\" && markdownAST?.children?.length) {\n      return h(\n        ContentRendererMarkdown,\n        {\n          value,\n          excerpt,\n          tag,\n          ...this.$attrs\n        }\n      );\n    }\n    return h(\n      \"pre\",\n      null,\n      JSON.stringify({ message: \"You should use slots with <ContentRenderer>\", value, excerpt, tag }, null, 2)\n    );\n  }\n});\n\n\n\n\nexport default _sfc_main",
      "start": 1708195450675,
      "end": 1708195450675,
      "order": "normal",
      "sourcemaps": {
        "mappings": ""
      }
    },
    {
      "name": "vite:vue-jsx",
      "start": 1708195450675,
      "end": 1708195450675,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1708195450675,
      "end": 1708195450675,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1708195450675,
      "end": 1708195450675,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1708195450675,
      "end": 1708195450675,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1708195450675,
      "end": 1708195450675,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1708195450675,
      "end": 1708195450675,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1708195450675,
      "end": 1708195450676,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1708195450676,
      "end": 1708195450676,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1708195450676,
      "end": 1708195450676,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1708195450676,
      "end": 1708195450676,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1708195450676,
      "end": 1708195450676,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1708195450676,
      "end": 1708195450676,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1708195450676,
      "end": 1708195450676,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1708195450676,
      "end": 1708195450676,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1708195450676,
      "end": 1708195450676,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1708195450676,
      "end": 1708195450676,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1708195450676,
      "end": 1708195450676,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1708195450676,
      "end": 1708195450676,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1708195450676,
      "end": 1708195450676,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1708195450676,
      "end": 1708195450676,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1708195450676,
      "end": 1708195450676,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1708195450676,
      "end": 1708195450676,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1708195450676,
      "end": 1708195450676,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1708195450676,
      "end": 1708195450676,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1708195450676,
      "end": 1708195450676,
      "order": "normal"
    }
  ]
}
