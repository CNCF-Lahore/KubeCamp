{
  "resolvedId": "/workspace/Kubernetes-Bootcamp/node_modules/engine.io-parser/build/esm/encodePacket.browser.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { PACKET_TYPES } from \"./commons.js\";\nconst withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        Object.prototype.toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\n// ArrayBuffer.isView method is not defined in IE10\nconst isView = obj => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj && obj.buffer instanceof ArrayBuffer;\n};\nconst encodePacket = ({ type, data }, supportsBinary, callback) => {\n    if (withNativeBlob && data instanceof Blob) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(data, callback);\n        }\n    }\n    else if (withNativeArrayBuffer &&\n        (data instanceof ArrayBuffer || isView(data))) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(new Blob([data]), callback);\n        }\n    }\n    // plain string\n    return callback(PACKET_TYPES[type] + (data || \"\"));\n};\nconst encodeBlobAsBase64 = (data, callback) => {\n    const fileReader = new FileReader();\n    fileReader.onload = function () {\n        const content = fileReader.result.split(\",\")[1];\n        callback(\"b\" + (content || \"\"));\n    };\n    return fileReader.readAsDataURL(data);\n};\nfunction toArray(data) {\n    if (data instanceof Uint8Array) {\n        return data;\n    }\n    else if (data instanceof ArrayBuffer) {\n        return new Uint8Array(data);\n    }\n    else {\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n    }\n}\nlet TEXT_ENCODER;\nexport function encodePacketToBinary(packet, callback) {\n    if (withNativeBlob && packet.data instanceof Blob) {\n        return packet.data\n            .arrayBuffer()\n            .then(toArray)\n            .then(callback);\n    }\n    else if (withNativeArrayBuffer &&\n        (packet.data instanceof ArrayBuffer || isView(packet.data))) {\n        return callback(toArray(packet.data));\n    }\n    encodePacket(packet, false, encoded => {\n        if (!TEXT_ENCODER) {\n            TEXT_ENCODER = new TextEncoder();\n        }\n        callback(TEXT_ENCODER.encode(encoded));\n    });\n}\nexport { encodePacket };\n",
      "start": 1708374876130,
      "end": 1708374876135,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1708374876135,
      "end": 1708374876135,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1708374876135,
      "end": 1708374876135,
      "order": "pre"
    },
    {
      "name": "pinceau-transforms",
      "result": "import { PACKET_TYPES } from \"./commons.js\";\nconst withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        Object.prototype.toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\n// ArrayBuffer.isView method is not defined in IE10\nconst isView = obj => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj && obj.buffer instanceof ArrayBuffer;\n};\nconst encodePacket = ({ type, data }, supportsBinary, callback) => {\n    if (withNativeBlob && data instanceof Blob) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(data, callback);\n        }\n    }\n    else if (withNativeArrayBuffer &&\n        (data instanceof ArrayBuffer || isView(data))) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(new Blob([data]), callback);\n        }\n    }\n    // plain string\n    return callback(PACKET_TYPES[type] + (data || \"\"));\n};\nconst encodeBlobAsBase64 = (data, callback) => {\n    const fileReader = new FileReader();\n    fileReader.onload = function () {\n        const content = fileReader.result.split(\",\")[1];\n        callback(\"b\" + (content || \"\"));\n    };\n    return fileReader.readAsDataURL(data);\n};\nfunction toArray(data) {\n    if (data instanceof Uint8Array) {\n        return data;\n    }\n    else if (data instanceof ArrayBuffer) {\n        return new Uint8Array(data);\n    }\n    else {\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n    }\n}\nlet TEXT_ENCODER;\nexport function encodePacketToBinary(packet, callback) {\n    if (withNativeBlob && packet.data instanceof Blob) {\n        return packet.data\n            .arrayBuffer()\n            .then(toArray)\n            .then(callback);\n    }\n    else if (withNativeArrayBuffer &&\n        (packet.data instanceof ArrayBuffer || isView(packet.data))) {\n        return callback(toArray(packet.data));\n    }\n    encodePacket(packet, false, encoded => {\n        if (!TEXT_ENCODER) {\n            TEXT_ENCODER = new TextEncoder();\n        }\n        callback(TEXT_ENCODER.encode(encoded));\n    });\n}\nexport { encodePacket };\n",
      "start": 1708374876135,
      "end": 1708374876136,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1708374876136,
      "end": 1708374876136,
      "order": "normal"
    }
  ]
}
