{
  "resolvedId": "/workspace/Kubernetes-Bootcamp/node_modules/@nuxtjs/color-mode/dist/runtime/plugin.client.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { computed, reactive, watch } from \"vue\";\nimport { defineNuxtPlugin, isVue2, isVue3, useRouter, useHead, useState } from \"#imports\";\nimport { globalName, storageKey, dataValue } from \"#color-mode-options\";\nconst helper = window[globalName] || {};\nexport default defineNuxtPlugin((nuxtApp) => {\n  const colorMode = useState(\"color-mode\", () => reactive({\n    // For SPA mode or fallback\n    preference: helper.preference,\n    value: helper.value,\n    unknown: false,\n    forced: false\n  })).value;\n  if (dataValue) {\n    if (isVue3) {\n      useHead({\n        htmlAttrs: { [`data-${dataValue}`]: computed(() => colorMode.value) }\n      });\n    } else {\n      const app = nuxtApp.nuxt2Context.app;\n      const originalHead = app.head;\n      app.head = function() {\n        const head = (typeof originalHead === \"function\" ? originalHead.call(this) : originalHead) || {};\n        head.htmlAttrs = head.htmlAttrs || {};\n        head.htmlAttrs[`data-${dataValue}`] = colorMode.value;\n        return head;\n      };\n    }\n  }\n  useRouter().afterEach((to) => {\n    const forcedColorMode = isVue2 ? to.matched[0]?.components.default?.options.colorMode : to.meta.colorMode;\n    if (forcedColorMode && forcedColorMode !== \"system\") {\n      colorMode.value = forcedColorMode;\n      colorMode.forced = true;\n    } else {\n      if (forcedColorMode === \"system\") {\n        console.warn(\"You cannot force the colorMode to system at the page level.\");\n      }\n      colorMode.forced = false;\n      colorMode.value = colorMode.preference === \"system\" ? helper.getColorScheme() : colorMode.preference;\n    }\n  });\n  let darkWatcher;\n  function watchMedia() {\n    if (darkWatcher || !window.matchMedia) {\n      return;\n    }\n    darkWatcher = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    darkWatcher.addEventListener(\"change\", () => {\n      if (!colorMode.forced && colorMode.preference === \"system\") {\n        colorMode.value = helper.getColorScheme();\n      }\n    });\n  }\n  watch(() => colorMode.preference, (preference) => {\n    if (colorMode.forced) {\n      return;\n    }\n    if (preference === \"system\") {\n      colorMode.value = helper.getColorScheme();\n      watchMedia();\n    } else {\n      colorMode.value = preference;\n    }\n    window.localStorage?.setItem(storageKey, preference);\n  }, { immediate: true });\n  watch(() => colorMode.value, (newValue, oldValue) => {\n    helper.removeColorScheme(oldValue);\n    helper.addColorScheme(newValue);\n  });\n  if (colorMode.preference === \"system\") {\n    watchMedia();\n  }\n  nuxtApp.hook(\"app:mounted\", () => {\n    if (colorMode.unknown) {\n      colorMode.preference = helper.preference;\n      colorMode.value = helper.value;\n      colorMode.unknown = false;\n    }\n  });\n  nuxtApp.provide(\"colorMode\", colorMode);\n});\n",
      "start": 1708087950098,
      "end": 1708087950257,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1708087950257,
      "end": 1708087950257,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1708087950257,
      "end": 1708087950257,
      "order": "pre"
    },
    {
      "name": "pinceau-transforms",
      "result": "import { computed, reactive, watch } from \"vue\";\nimport { defineNuxtPlugin, isVue2, isVue3, useRouter, useHead, useState } from \"#imports\";\nimport { globalName, storageKey, dataValue } from \"#color-mode-options\";\nconst helper = window[globalName] || {};\nexport default defineNuxtPlugin((nuxtApp) => {\n  const colorMode = useState(\"color-mode\", () => reactive({\n    // For SPA mode or fallback\n    preference: helper.preference,\n    value: helper.value,\n    unknown: false,\n    forced: false\n  })).value;\n  if (dataValue) {\n    if (isVue3) {\n      useHead({\n        htmlAttrs: { [`data-${dataValue}`]: computed(() => colorMode.value) }\n      });\n    } else {\n      const app = nuxtApp.nuxt2Context.app;\n      const originalHead = app.head;\n      app.head = function() {\n        const head = (typeof originalHead === \"function\" ? originalHead.call(this) : originalHead) || {};\n        head.htmlAttrs = head.htmlAttrs || {};\n        head.htmlAttrs[`data-${dataValue}`] = colorMode.value;\n        return head;\n      };\n    }\n  }\n  useRouter().afterEach((to) => {\n    const forcedColorMode = isVue2 ? to.matched[0]?.components.default?.options.colorMode : to.meta.colorMode;\n    if (forcedColorMode && forcedColorMode !== \"system\") {\n      colorMode.value = forcedColorMode;\n      colorMode.forced = true;\n    } else {\n      if (forcedColorMode === \"system\") {\n        console.warn(\"You cannot force the colorMode to system at the page level.\");\n      }\n      colorMode.forced = false;\n      colorMode.value = colorMode.preference === \"system\" ? helper.getColorScheme() : colorMode.preference;\n    }\n  });\n  let darkWatcher;\n  function watchMedia() {\n    if (darkWatcher || !window.matchMedia) {\n      return;\n    }\n    darkWatcher = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    darkWatcher.addEventListener(\"change\", () => {\n      if (!colorMode.forced && colorMode.preference === \"system\") {\n        colorMode.value = helper.getColorScheme();\n      }\n    });\n  }\n  watch(() => colorMode.preference, (preference) => {\n    if (colorMode.forced) {\n      return;\n    }\n    if (preference === \"system\") {\n      colorMode.value = helper.getColorScheme();\n      watchMedia();\n    } else {\n      colorMode.value = preference;\n    }\n    window.localStorage?.setItem(storageKey, preference);\n  }, { immediate: true });\n  watch(() => colorMode.value, (newValue, oldValue) => {\n    helper.removeColorScheme(oldValue);\n    helper.addColorScheme(newValue);\n  });\n  if (colorMode.preference === \"system\") {\n    watchMedia();\n  }\n  nuxtApp.hook(\"app:mounted\", () => {\n    if (colorMode.unknown) {\n      colorMode.preference = helper.preference;\n      colorMode.value = helper.value;\n      colorMode.unknown = false;\n    }\n  });\n  nuxtApp.provide(\"colorMode\", colorMode);\n});\n",
      "start": 1708087950257,
      "end": 1708087950257,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1708087950257,
      "end": 1708087950257,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1708087950257,
      "end": 1708087950257,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1708087950257,
      "end": 1708087950257,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1708087950257,
      "end": 1708087950257,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1708087950257,
      "end": 1708087950257,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1708087950257,
      "end": 1708087950257,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1708087950257,
      "end": 1708087950257,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1708087950257,
      "end": 1708087950257,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1708087950257,
      "end": 1708087950258,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1708087950258,
      "end": 1708087950259,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1708087950259,
      "end": 1708087950259,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1708087950259,
      "end": 1708087950259,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1708087950259,
      "end": 1708087950259,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1708087950259,
      "end": 1708087950259,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1708087950259,
      "end": 1708087950259,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1708087950259,
      "end": 1708087950259,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1708087950259,
      "end": 1708087950259,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1708087950259,
      "end": 1708087950259,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1708087950259,
      "end": 1708087950259,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1708087950259,
      "end": 1708087950259,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1708087950259,
      "end": 1708087950259,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1708087950259,
      "end": 1708087950259,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1708087950259,
      "end": 1708087950261,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "result": "import { defineNuxtPlugin } from '#app/nuxt';\nimport { isVue2, isVue3 } from 'vue-demi';\nimport { useRouter } from '#app/composables/router';\nimport { useHead } from '@unhead/vue';\nimport { useState } from '#app/composables/state';\nimport { computed, reactive, watch } from \"vue\";\nimport { globalName, storageKey, dataValue } from \"#color-mode-options\";\nconst helper = window[globalName] || {};\nexport default defineNuxtPlugin((nuxtApp) => {\n  const colorMode = useState(\"color-mode\", () => reactive({\n    // For SPA mode or fallback\n    preference: helper.preference,\n    value: helper.value,\n    unknown: false,\n    forced: false\n  })).value;\n  if (dataValue) {\n    if (isVue3) {\n      useHead({\n        htmlAttrs: { [`data-${dataValue}`]: computed(() => colorMode.value) }\n      });\n    } else {\n      const app = nuxtApp.nuxt2Context.app;\n      const originalHead = app.head;\n      app.head = function() {\n        const head = (typeof originalHead === \"function\" ? originalHead.call(this) : originalHead) || {};\n        head.htmlAttrs = head.htmlAttrs || {};\n        head.htmlAttrs[`data-${dataValue}`] = colorMode.value;\n        return head;\n      };\n    }\n  }\n  useRouter().afterEach((to) => {\n    const forcedColorMode = isVue2 ? to.matched[0]?.components.default?.options.colorMode : to.meta.colorMode;\n    if (forcedColorMode && forcedColorMode !== \"system\") {\n      colorMode.value = forcedColorMode;\n      colorMode.forced = true;\n    } else {\n      if (forcedColorMode === \"system\") {\n        console.warn(\"You cannot force the colorMode to system at the page level.\");\n      }\n      colorMode.forced = false;\n      colorMode.value = colorMode.preference === \"system\" ? helper.getColorScheme() : colorMode.preference;\n    }\n  });\n  let darkWatcher;\n  function watchMedia() {\n    if (darkWatcher || !window.matchMedia) {\n      return;\n    }\n    darkWatcher = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    darkWatcher.addEventListener(\"change\", () => {\n      if (!colorMode.forced && colorMode.preference === \"system\") {\n        colorMode.value = helper.getColorScheme();\n      }\n    });\n  }\n  watch(() => colorMode.preference, (preference) => {\n    if (colorMode.forced) {\n      return;\n    }\n    if (preference === \"system\") {\n      colorMode.value = helper.getColorScheme();\n      watchMedia();\n    } else {\n      colorMode.value = preference;\n    }\n    window.localStorage?.setItem(storageKey, preference);\n  }, { immediate: true });\n  watch(() => colorMode.value, (newValue, oldValue) => {\n    helper.removeColorScheme(oldValue);\n    helper.addColorScheme(newValue);\n  });\n  if (colorMode.preference === \"system\") {\n    watchMedia();\n  }\n  nuxtApp.hook(\"app:mounted\", () => {\n    if (colorMode.unknown) {\n      colorMode.preference = helper.preference;\n      colorMode.value = helper.value;\n      colorMode.unknown = false;\n    }\n  });\n  nuxtApp.provide(\"colorMode\", colorMode);\n});\n",
      "start": 1708087950261,
      "end": 1708087950263,
      "order": "post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;;;AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAEhD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxlC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACfpzpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACplB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC;"
      }
    },
    {
      "name": "unctx:transform",
      "start": 1708087950263,
      "end": 1708087950265,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1708087950265,
      "end": 1708087950265,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1708087950265,
      "end": 1708087950265,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1708087950265,
      "end": 1708087950265,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1708087950265,
      "end": 1708087950265,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1708087950265,
      "end": 1708087950265,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1708087950265,
      "end": 1708087950265,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1708087950265,
      "end": 1708087950265,
      "order": "normal"
    }
  ]
}
