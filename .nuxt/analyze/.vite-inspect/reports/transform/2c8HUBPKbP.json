{
  "resolvedId": "/workspace/Kubernetes-Bootcamp/node_modules/nuxt-component-meta/dist/runtime/composables/useComponentMeta.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { reactive, computed, unref } from \"vue\";\nimport { useNuxtApp, useAsyncData } from \"#imports\";\nexport const __getComponentMeta = async () => {\n  const __metas = await import(\"#nuxt-component-meta\");\n  return __metas?.default || __metas;\n};\nexport async function useComponentMeta(componentName) {\n  const nuxtApp = useNuxtApp();\n  const _componentName = unref(componentName);\n  if (process.dev) {\n    const __componentMeta = await __getComponentMeta();\n    if (!nuxtApp._componentMeta) {\n      nuxtApp._componentMeta = reactive(__componentMeta);\n    }\n    if (_componentName) {\n      return computed(() => nuxtApp._componentMeta[_componentName]);\n    }\n    return computed(() => nuxtApp._componentMeta);\n  } else {\n    const { data } = await useAsyncData(\n      `nuxt-component-meta${_componentName ? `-${_componentName}` : \"\"}`,\n      () => {\n        return $fetch(`/api/component-meta${_componentName ? `/${_componentName}` : \"\"}`);\n      }\n    );\n    return computed(() => data.value);\n  }\n}\nif (process.dev) {\n  async function applyHMR(newConfig) {\n    const componentMetas = await useComponentMeta();\n    if (newConfig && componentMetas.value) {\n      for (const key in newConfig) {\n        componentMetas.value[key] = newConfig[key];\n      }\n      for (const key in componentMetas.value) {\n        if (!(key in newConfig)) {\n          delete componentMetas.value[key];\n        }\n      }\n    }\n  }\n  if (import.meta.hot) {\n    import.meta.hot.accept(async (newModule) => {\n      const newMetas = await newModule.__getComponentMeta();\n      applyHMR(newMetas);\n    });\n  }\n}\n",
      "start": 1709714222278,
      "end": 1709714222680,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709714222680,
      "end": 1709714222680,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709714222680,
      "end": 1709714222680,
      "order": "pre"
    },
    {
      "name": "pinceau-transforms",
      "result": "import { reactive, computed, unref } from \"vue\";\nimport { useNuxtApp, useAsyncData } from \"#imports\";\nexport const __getComponentMeta = async () => {\n  const __metas = await import(\"#nuxt-component-meta\");\n  return __metas?.default || __metas;\n};\nexport async function useComponentMeta(componentName) {\n  const nuxtApp = useNuxtApp();\n  const _componentName = unref(componentName);\n  if (process.dev) {\n    const __componentMeta = await __getComponentMeta();\n    if (!nuxtApp._componentMeta) {\n      nuxtApp._componentMeta = reactive(__componentMeta);\n    }\n    if (_componentName) {\n      return computed(() => nuxtApp._componentMeta[_componentName]);\n    }\n    return computed(() => nuxtApp._componentMeta);\n  } else {\n    const { data } = await useAsyncData(\n      `nuxt-component-meta${_componentName ? `-${_componentName}` : \"\"}`,\n      () => {\n        return $fetch(`/api/component-meta${_componentName ? `/${_componentName}` : \"\"}`);\n      }\n    );\n    return computed(() => data.value);\n  }\n}\nif (process.dev) {\n  async function applyHMR(newConfig) {\n    const componentMetas = await useComponentMeta();\n    if (newConfig && componentMetas.value) {\n      for (const key in newConfig) {\n        componentMetas.value[key] = newConfig[key];\n      }\n      for (const key in componentMetas.value) {\n        if (!(key in newConfig)) {\n          delete componentMetas.value[key];\n        }\n      }\n    }\n  }\n  if (import.meta.hot) {\n    import.meta.hot.accept(async (newModule) => {\n      const newMetas = await newModule.__getComponentMeta();\n      applyHMR(newMetas);\n    });\n  }\n}\n",
      "start": 1709714222680,
      "end": 1709714222680,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1709714222680,
      "end": 1709714222680,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709714222680,
      "end": 1709714222680,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709714222680,
      "end": 1709714222680,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709714222680,
      "end": 1709714222680,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709714222680,
      "end": 1709714222680,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709714222681,
      "end": 1709714222681,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709714222681,
      "end": 1709714222681,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709714222681,
      "end": 1709714222681,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709714222681,
      "end": 1709714222681,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709714222681,
      "end": 1709714222681,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709714222681,
      "end": 1709714222681,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709714222681,
      "end": 1709714222681,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709714222681,
      "end": 1709714222681,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709714222681,
      "end": 1709714222681,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { reactive, computed, unref } from \"vue\";\nimport { useNuxtApp, useAsyncData } from \"#imports\";\nexport const __getComponentMeta = async () => {\n  const __metas = await import(\"#nuxt-component-meta\");\n  return __metas?.default || __metas;\n};\nexport async function useComponentMeta(componentName) {\n  const nuxtApp = useNuxtApp();\n  const _componentName = unref(componentName);\n  if (false) {\n    const __componentMeta = await __getComponentMeta();\n    if (!nuxtApp._componentMeta) {\n      nuxtApp._componentMeta = reactive(__componentMeta);\n    }\n    if (_componentName) {\n      return computed(() => nuxtApp._componentMeta[_componentName]);\n    }\n    return computed(() => nuxtApp._componentMeta);\n  } else {\n    const { data } = await useAsyncData(\n      `nuxt-component-meta${_componentName ? `-${_componentName}` : \"\"}`,\n      () => {\n        return $fetch(`/api/component-meta${_componentName ? `/${_componentName}` : \"\"}`);\n      }\n    );\n    return computed(() => data.value);\n  }\n}\nif (false) {\n  async function applyHMR(newConfig) {\n    const componentMetas = await useComponentMeta();\n    if (newConfig && componentMetas.value) {\n      for (const key in newConfig) {\n        componentMetas.value[key] = newConfig[key];\n      }\n      for (const key in componentMetas.value) {\n        if (!(key in newConfig)) {\n          delete componentMetas.value[key];\n        }\n      }\n    }\n  }\n  if (void 0) {\n    (void 0).accept(async (newModule) => {\n      const newMetas = await newModule.__getComponentMeta();\n      applyHMR(newMetas);\n    });\n  }\n}\n",
      "start": 1709714222681,
      "end": 1709714222825,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1709714222825,
      "end": 1709714222825,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709714222825,
      "end": 1709714222825,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709714222825,
      "end": 1709714222825,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709714222825,
      "end": 1709714222825,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709714222825,
      "end": 1709714222825,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709714222825,
      "end": 1709714222825,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709714222825,
      "end": 1709714222825,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709714222825,
      "end": 1709714222826,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "result": "import { useNuxtApp } from '#app/nuxt';\nimport { useAsyncData } from '#app/composables/asyncData';\nimport { reactive, computed, unref } from \"vue\";\nexport const __getComponentMeta = async () => {\n  const __metas = await import(\"#nuxt-component-meta\");\n  return __metas?.default || __metas;\n};\nexport async function useComponentMeta(componentName) {\n  const nuxtApp = useNuxtApp();\n  const _componentName = unref(componentName);\n  if (false) {\n    const __componentMeta = await __getComponentMeta();\n    if (!nuxtApp._componentMeta) {\n      nuxtApp._componentMeta = reactive(__componentMeta);\n    }\n    if (_componentName) {\n      return computed(() => nuxtApp._componentMeta[_componentName]);\n    }\n    return computed(() => nuxtApp._componentMeta);\n  } else {\n    const { data } = await useAsyncData(\n      `nuxt-component-meta${_componentName ? `-${_componentName}` : \"\"}`,\n      () => {\n        return $fetch(`/api/component-meta${_componentName ? `/${_componentName}` : \"\"}`);\n      }\n    );\n    return computed(() => data.value);\n  }\n}\nif (false) {\n  async function applyHMR(newConfig) {\n    const componentMetas = await useComponentMeta();\n    if (newConfig && componentMetas.value) {\n      for (const key in newConfig) {\n        componentMetas.value[key] = newConfig[key];\n      }\n      for (const key in componentMetas.value) {\n        if (!(key in newConfig)) {\n          delete componentMetas.value[key];\n        }\n      }\n    }\n  }\n  if (void 0) {\n    (void 0).accept(async (newModule) => {\n      const newMetas = await newModule.__getComponentMeta();\n      applyHMR(newMetas);\n    });\n  }\n}\n",
      "start": 1709714222826,
      "end": 1709714222827,
      "order": "post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAEhvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpE,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACbtC,CAAC,CAAC,CAAC;AACH,CAAC;AACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACfzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AACH,CAAC;"
      }
    },
    {
      "name": "unctx:transform",
      "start": 1709714222827,
      "end": 1709714222827,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709714222827,
      "end": 1709714222827,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709714222827,
      "end": 1709714222827,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709714222827,
      "end": 1709714222827,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709714222828,
      "end": 1709714222828,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709714222828,
      "end": 1709714222828,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "result": "import { __vitePreload } from \"\u0000vite/preload-helper.js\";import { useNuxtApp } from '#app/nuxt';\nimport { useAsyncData } from '#app/composables/asyncData';\nimport { reactive, computed, unref } from \"vue\";\nexport const __getComponentMeta = async () => {\n  const __metas = await __vitePreload(() => import(\"#nuxt-component-meta\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url);\n  return __metas?.default || __metas;\n};\nexport async function useComponentMeta(componentName) {\n  const nuxtApp = useNuxtApp();\n  const _componentName = unref(componentName);\n  if (false) {\n    const __componentMeta = await __getComponentMeta();\n    if (!nuxtApp._componentMeta) {\n      nuxtApp._componentMeta = reactive(__componentMeta);\n    }\n    if (_componentName) {\n      return computed(() => nuxtApp._componentMeta[_componentName]);\n    }\n    return computed(() => nuxtApp._componentMeta);\n  } else {\n    const { data } = await useAsyncData(\n      `nuxt-component-meta${_componentName ? `-${_componentName}` : \"\"}`,\n      () => {\n        return $fetch(`/api/component-meta${_componentName ? `/${_componentName}` : \"\"}`);\n      }\n    );\n    return computed(() => data.value);\n  }\n}\nif (false) {\n  async function applyHMR(newConfig) {\n    const componentMetas = await useComponentMeta();\n    if (newConfig && componentMetas.value) {\n      for (const key in newConfig) {\n        componentMetas.value[key] = newConfig[key];\n      }\n      for (const key in componentMetas.value) {\n        if (!(key in newConfig)) {\n          delete componentMetas.value[key];\n        }\n      }\n    }\n  }\n  if (void 0) {\n    (void 0).accept(async (newModule) => {\n      const newMetas = await newModule.__getComponentMeta();\n      applyHMR(newMetas);\n    });\n  }\n}\n",
      "start": 1709714222828,
      "end": 1709714222828,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:reporter",
      "start": 1709714222828,
      "end": 1709714222828,
      "order": "normal"
    }
  ]
}
