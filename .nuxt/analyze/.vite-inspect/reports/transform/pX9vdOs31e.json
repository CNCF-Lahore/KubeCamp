{
  "resolvedId": "/workspace/Kubernetes-Bootcamp/node_modules/@nuxt/content/dist/runtime/components/ContentDoc.vue?nuxt_component=async&nuxt_component_name=ContentDoc",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "<script>\nimport { defineComponent, h, useSlots } from \"vue\";\nimport { withTrailingSlash } from \"ufo\";\nimport ContentRenderer from \"./ContentRenderer.vue\";\nimport ContentQuery from \"./ContentQuery.vue\";\nimport { useRuntimeConfig, useRoute, useContentHead } from \"#imports\";\nconst ContentDoc = defineComponent({\n  name: \"ContentDoc\",\n  props: {\n    /**\n     * Renderer props\n     */\n    /**\n     * The tag to use for the renderer element if it is used.\n     * @default 'div'\n     */\n    tag: {\n      type: String,\n      required: false,\n      default: \"div\"\n    },\n    /**\n     * Whether or not to render the excerpt.\n     * @default false\n     */\n    excerpt: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Query props\n     */\n    /**\n     * The path of the content to load from content source.\n     * @default useRoute().path\n     */\n    path: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    /**\n     * A query builder params object to be passed to <ContentQuery /> component.\n     */\n    query: {\n      type: Object,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Whether or not to map the document data to the `head` property.\n     */\n    head: {\n      type: Boolean,\n      required: false,\n      default: void 0\n    }\n  },\n  /**\n   * Document empty fallback\n   * @slot empty\n   */\n  /**\n   * Document not found fallback\n   * @slot not-found\n   */\n  render(ctx) {\n    const { contentHead } = useRuntimeConfig().public.content;\n    const slots = useSlots();\n    const { tag, excerpt, path, query, head } = ctx;\n    const shouldInjectContentHead = head === void 0 ? contentHead : head;\n    const contentQueryProps = {\n      ...query || {},\n      path: path || query?.path || withTrailingSlash(useRoute().path),\n      find: \"one\"\n    };\n    const emptyNode = (slot, data) => h(\"pre\", null, JSON.stringify({ message: \"You should use slots with <ContentDoc>\", slot, data }, null, 2));\n    return h(\n      ContentQuery,\n      contentQueryProps,\n      {\n        // Default slot\n        default: slots?.default ? ({ data, refresh, isPartial }) => {\n          if (shouldInjectContentHead) {\n            useContentHead(data);\n          }\n          return slots.default?.({ doc: data, refresh, isPartial, excerpt, ...this.$attrs });\n        } : ({ data }) => {\n          if (shouldInjectContentHead) {\n            useContentHead(data);\n          }\n          return h(\n            ContentRenderer,\n            { value: data, excerpt, tag, ...this.$attrs },\n            // Forward local `empty` slots to ContentRenderer if it is used.\n            { empty: (bindings) => slots?.empty ? slots.empty(bindings) : emptyNode(\"default\", data) }\n          );\n        },\n        // Empty slot\n        empty: (bindings) => slots?.empty?.(bindings) || h(\"p\", null, \"Document is empty, overwrite this content with #empty slot in <ContentDoc>.\"),\n        // Not Found slot\n        \"not-found\": (bindings) => slots?.[\"not-found\"]?.(bindings) || h(\"p\", null, \"Document not found, overwrite this content with #not-found slot in <ContentDoc>.\")\n      }\n    );\n  }\n});\nexport default ContentDoc;\n</script>\n",
      "start": 1709714219934,
      "end": 1709714220004,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709714220004,
      "end": 1709714220004,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709714220005,
      "end": 1709714220005,
      "order": "pre"
    },
    {
      "name": "pinceau-transforms",
      "start": 1709714220005,
      "end": 1709714220005,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1709714220005,
      "end": 1709714220005,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709714220005,
      "end": 1709714220005,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709714220005,
      "end": 1709714220005,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709714220005,
      "end": 1709714220005,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709714220005,
      "end": 1709714220005,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709714220005,
      "end": 1709714220005,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "result": "\nimport { defineComponent, h, useSlots } from \"vue\";\nimport { withTrailingSlash } from \"ufo\";\nimport ContentRenderer from \"./ContentRenderer.vue\";\nimport ContentQuery from \"./ContentQuery.vue\";\nimport { useRuntimeConfig, useRoute, useContentHead } from \"#imports\";\nconst ContentDoc = defineComponent({\n  name: \"ContentDoc\",\n  props: {\n    /**\n     * Renderer props\n     */\n    /**\n     * The tag to use for the renderer element if it is used.\n     * @default 'div'\n     */\n    tag: {\n      type: String,\n      required: false,\n      default: \"div\"\n    },\n    /**\n     * Whether or not to render the excerpt.\n     * @default false\n     */\n    excerpt: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Query props\n     */\n    /**\n     * The path of the content to load from content source.\n     * @default useRoute().path\n     */\n    path: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    /**\n     * A query builder params object to be passed to <ContentQuery /> component.\n     */\n    query: {\n      type: Object,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Whether or not to map the document data to the `head` property.\n     */\n    head: {\n      type: Boolean,\n      required: false,\n      default: void 0\n    }\n  },\n  /**\n   * Document empty fallback\n   * @slot empty\n   */\n  /**\n   * Document not found fallback\n   * @slot not-found\n   */\n  render(ctx) {\n    const { contentHead } = useRuntimeConfig().public.content;\n    const slots = useSlots();\n    const { tag, excerpt, path, query, head } = ctx;\n    const shouldInjectContentHead = head === void 0 ? contentHead : head;\n    const contentQueryProps = {\n      ...query || {},\n      path: path || query?.path || withTrailingSlash(useRoute().path),\n      find: \"one\"\n    };\n    const emptyNode = (slot, data) => h(\"pre\", null, JSON.stringify({ message: \"You should use slots with <ContentDoc>\", slot, data }, null, 2));\n    return h(\n      ContentQuery,\n      contentQueryProps,\n      {\n        // Default slot\n        default: slots?.default ? ({ data, refresh, isPartial }) => {\n          if (shouldInjectContentHead) {\n            useContentHead(data);\n          }\n          return slots.default?.({ doc: data, refresh, isPartial, excerpt, ...this.$attrs });\n        } : ({ data }) => {\n          if (shouldInjectContentHead) {\n            useContentHead(data);\n          }\n          return h(\n            ContentRenderer,\n            { value: data, excerpt, tag, ...this.$attrs },\n            // Forward local `empty` slots to ContentRenderer if it is used.\n            { empty: (bindings) => slots?.empty ? slots.empty(bindings) : emptyNode(\"default\", data) }\n          );\n        },\n        // Empty slot\n        empty: (bindings) => slots?.empty?.(bindings) || h(\"p\", null, \"Document is empty, overwrite this content with #empty slot in <ContentDoc>.\"),\n        // Not Found slot\n        \"not-found\": (bindings) => slots?.[\"not-found\"]?.(bindings) || h(\"p\", null, \"Document not found, overwrite this content with #not-found slot in <ContentDoc>.\")\n      }\n    );\n  }\n});\nconst _sfc_main = ContentDoc;\n\n\n\n\nexport default _sfc_main",
      "start": 1709714220005,
      "end": 1709714220007,
      "order": "normal",
      "sourcemaps": {
        "mappings": ""
      }
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709714220007,
      "end": 1709714220007,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709714220007,
      "end": 1709714220007,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709714220007,
      "end": 1709714220007,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709714220007,
      "end": 1709714220007,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "result": "import { defineAsyncComponent } from \"vue\"\nexport default defineAsyncComponent(() => import(\"/workspace/Kubernetes-Bootcamp/node_modules/@nuxt/content/dist/runtime/components/ContentDoc.vue\").then(r => r.default))",
      "start": 1709714220007,
      "end": 1709714220007,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "replace",
      "start": 1709714220007,
      "end": 1709714220007,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709714220007,
      "end": 1709714220007,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709714220007,
      "end": 1709714220007,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709714220007,
      "end": 1709714220007,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709714220007,
      "end": 1709714220007,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709714220007,
      "end": 1709714220007,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709714220007,
      "end": 1709714220007,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709714220007,
      "end": 1709714220007,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709714220007,
      "end": 1709714220007,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709714220007,
      "end": 1709714220007,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709714220007,
      "end": 1709714220007,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709714220007,
      "end": 1709714220007,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709714220007,
      "end": 1709714220007,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709714220007,
      "end": 1709714220007,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709714220007,
      "end": 1709714220007,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709714220007,
      "end": 1709714220007,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709714220007,
      "end": 1709714220007,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709714220007,
      "end": 1709714220007,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "result": "import { __vitePreload } from \"\u0000vite/preload-helper.js\";import { defineAsyncComponent } from \"vue\"\nexport default defineAsyncComponent(() => __vitePreload(() => import(\"/workspace/Kubernetes-Bootcamp/node_modules/@nuxt/content/dist/runtime/components/ContentDoc.vue\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url).then(r => r.default))",
      "start": 1709714220007,
      "end": 1709714220008,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:reporter",
      "start": 1709714220008,
      "end": 1709714220008,
      "order": "normal"
    }
  ]
}
