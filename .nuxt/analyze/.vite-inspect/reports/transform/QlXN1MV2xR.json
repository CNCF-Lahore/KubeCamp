{
  "resolvedId": "/workspace/Kubernetes-Bootcamp/node_modules/@nuxt/content/dist/runtime/components/ContentList.vue",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "<script>\nimport { defineComponent, h, useSlots } from \"vue\";\nimport ContentQuery from \"./ContentQuery.vue\";\nconst emptyNode = (slot, data) => h(\"pre\", null, JSON.stringify({ message: \"You should use slots with <ContentList>\", slot, data }, null, 2));\nconst ContentList = defineComponent({\n  name: \"ContentList\",\n  props: {\n    /**\n     * Query props\n     */\n    /**\n     * The path of the content to load from content source.\n     * @default '/'\n     */\n    path: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    /**\n     * A query builder params object to be passed to <ContentQuery /> component.\n     */\n    query: {\n      type: Object,\n      required: false,\n      default: void 0\n    }\n  },\n  /**\n   * Content empty fallback\n   * @slot empty\n   */\n  /**\n   * Content not found fallback\n   * @slot not-found\n   */\n  render(ctx) {\n    const slots = useSlots();\n    const { path, query } = ctx;\n    const contentQueryProps = {\n      ...query || {},\n      path: path || query?.path || \"/\"\n    };\n    return h(\n      ContentQuery,\n      contentQueryProps,\n      {\n        // Default slot\n        default: slots?.default ? ({ data, refresh, isPartial }) => slots.default({ list: data, refresh, isPartial, ...this.$attrs }) : (bindings) => emptyNode(\"default\", bindings.data),\n        // Empty slot\n        empty: (bindings) => slots?.empty ? slots.empty(bindings) : emptyNode(\"default\", bindings?.data),\n        // Not Found slot\n        \"not-found\": (bindings) => slots?.[\"not-found\"] ? slots?.[\"not-found\"]?.(bindings) : emptyNode(\"not-found\", bindings?.data)\n      }\n    );\n  }\n});\nexport default ContentList;\n</script>\n",
      "start": 1707500037776,
      "end": 1707500037938,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1707500037938,
      "end": 1707500037938,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1707500037938,
      "end": 1707500037938,
      "order": "pre"
    },
    {
      "name": "pinceau-transforms",
      "result": "<script>\nimport { defineComponent, h, useSlots } from \"vue\";\nimport ContentQuery from \"./ContentQuery.vue\";\nconst emptyNode = (slot, data) => h(\"pre\", null, JSON.stringify({ message: \"You should use slots with <ContentList>\", slot, data }, null, 2));\nconst ContentList = defineComponent({\n  name: \"ContentList\",\n  props: {\n    /**\n     * Query props\n     */\n    /**\n     * The path of the content to load from content source.\n     * @default '/'\n     */\n    path: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    /**\n     * A query builder params object to be passed to <ContentQuery /> component.\n     */\n    query: {\n      type: Object,\n      required: false,\n      default: void 0\n    }\n  },\n  /**\n   * Content empty fallback\n   * @slot empty\n   */\n  /**\n   * Content not found fallback\n   * @slot not-found\n   */\n  render(ctx) {\n    const slots = useSlots();\n    const { path, query } = ctx;\n    const contentQueryProps = {\n      ...query || {},\n      path: path || query?.path || \"/\"\n    };\n    return h(\n      ContentQuery,\n      contentQueryProps,\n      {\n        // Default slot\n        default: slots?.default ? ({ data, refresh, isPartial }) => slots.default({ list: data, refresh, isPartial, ...this.$attrs }) : (bindings) => emptyNode(\"default\", bindings.data),\n        // Empty slot\n        empty: (bindings) => slots?.empty ? slots.empty(bindings) : emptyNode(\"default\", bindings?.data),\n        // Not Found slot\n        \"not-found\": (bindings) => slots?.[\"not-found\"] ? slots?.[\"not-found\"]?.(bindings) : emptyNode(\"not-found\", bindings?.data)\n      }\n    );\n  }\n});\nexport default ContentList;\n</script>\n",
      "start": 1707500037938,
      "end": 1707500037939,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "file": "/workspace/Kubernetes-Bootcamp/node_modules/@nuxt/content/dist/runtime/components/ContentList.vue",
        "sources": [
          "/workspace/Kubernetes-Bootcamp/node_modules/@nuxt/content/dist/runtime/components/ContentList.vue"
        ],
        "names": [],
        "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;"
      }
    },
    {
      "name": "content-slot",
      "start": 1707500037939,
      "end": 1707500037939,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1707500037939,
      "end": 1707500037939,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1707500037939,
      "end": 1707500037939,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1707500037939,
      "end": 1707500037939,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1707500037939,
      "end": 1707500037939,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1707500037939,
      "end": 1707500037939,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "result": "\nimport { defineComponent, h, useSlots } from \"vue\";\nimport ContentQuery from \"./ContentQuery.vue\";\nconst emptyNode = (slot, data) => h(\"pre\", null, JSON.stringify({ message: \"You should use slots with <ContentList>\", slot, data }, null, 2));\nconst ContentList = defineComponent({\n  name: \"ContentList\",\n  props: {\n    /**\n     * Query props\n     */\n    /**\n     * The path of the content to load from content source.\n     * @default '/'\n     */\n    path: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    /**\n     * A query builder params object to be passed to <ContentQuery /> component.\n     */\n    query: {\n      type: Object,\n      required: false,\n      default: void 0\n    }\n  },\n  /**\n   * Content empty fallback\n   * @slot empty\n   */\n  /**\n   * Content not found fallback\n   * @slot not-found\n   */\n  render(ctx) {\n    const slots = useSlots();\n    const { path, query } = ctx;\n    const contentQueryProps = {\n      ...query || {},\n      path: path || query?.path || \"/\"\n    };\n    return h(\n      ContentQuery,\n      contentQueryProps,\n      {\n        // Default slot\n        default: slots?.default ? ({ data, refresh, isPartial }) => slots.default({ list: data, refresh, isPartial, ...this.$attrs }) : (bindings) => emptyNode(\"default\", bindings.data),\n        // Empty slot\n        empty: (bindings) => slots?.empty ? slots.empty(bindings) : emptyNode(\"default\", bindings?.data),\n        // Not Found slot\n        \"not-found\": (bindings) => slots?.[\"not-found\"] ? slots?.[\"not-found\"]?.(bindings) : emptyNode(\"not-found\", bindings?.data)\n      }\n    );\n  }\n});\nconst _sfc_main = ContentList;\n\n\n\n\nexport default _sfc_main",
      "start": 1707500037939,
      "end": 1707500037939,
      "order": "normal",
      "sourcemaps": {
        "mappings": ""
      }
    },
    {
      "name": "vite:vue-jsx",
      "start": 1707500037939,
      "end": 1707500037939,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707500037939,
      "end": 1707500037939,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1707500037939,
      "end": 1707500037939,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1707500037939,
      "end": 1707500037939,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1707500037939,
      "end": 1707500037940,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707500037940,
      "end": 1707500037940,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1707500037940,
      "end": 1707500037940,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1707500037940,
      "end": 1707500037940,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1707500037940,
      "end": 1707500037940,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1707500037940,
      "end": 1707500037940,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1707500037940,
      "end": 1707500037940,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1707500037940,
      "end": 1707500037940,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1707500037940,
      "end": 1707500037940,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1707500037940,
      "end": 1707500037940,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1707500037940,
      "end": 1707500037940,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1707500037940,
      "end": 1707500037940,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1707500037940,
      "end": 1707500037940,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1707500037940,
      "end": 1707500037940,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1707500037940,
      "end": 1707500037940,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1707500037940,
      "end": 1707500037940,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1707500037940,
      "end": 1707500037940,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1707500037940,
      "end": 1707500037940,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1707500037940,
      "end": 1707500037940,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1707500037940,
      "end": 1707500037940,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1707500037940,
      "end": 1707500037940,
      "order": "normal"
    }
  ]
}
