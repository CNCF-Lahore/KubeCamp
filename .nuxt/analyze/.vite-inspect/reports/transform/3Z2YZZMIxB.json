{
  "resolvedId": "/workspace/Kubernetes-Bootcamp/node_modules/@socket.io/component-emitter/index.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nexport function Emitter(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  function on() {\n    this.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks['$' + event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks['$' + event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n\n  // Remove event specific arrays for event types that no\n  // one is subscribed for to avoid memory leak.\n  if (callbacks.length === 0) {\n    delete this._callbacks['$' + event];\n  }\n\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n\n  var args = new Array(arguments.length - 1)\n    , callbacks = this._callbacks['$' + event];\n\n  for (var i = 1; i < arguments.length; i++) {\n    args[i - 1] = arguments[i];\n  }\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n// alias used for reserved events (protected method)\nEmitter.prototype.emitReserved = Emitter.prototype.emit;\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks['$' + event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n",
      "start": 1707500041569,
      "end": 1707500041870,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1707500041870,
      "end": 1707500041870,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1707500041870,
      "end": 1707500041870,
      "order": "pre"
    },
    {
      "name": "pinceau-transforms",
      "result": "/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nexport function Emitter(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  function on() {\n    this.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks['$' + event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks['$' + event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n\n  // Remove event specific arrays for event types that no\n  // one is subscribed for to avoid memory leak.\n  if (callbacks.length === 0) {\n    delete this._callbacks['$' + event];\n  }\n\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n\n  var args = new Array(arguments.length - 1)\n    , callbacks = this._callbacks['$' + event];\n\n  for (var i = 1; i < arguments.length; i++) {\n    args[i - 1] = arguments[i];\n  }\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n// alias used for reserved events (protected method)\nEmitter.prototype.emitReserved = Emitter.prototype.emit;\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks['$' + event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n",
      "start": 1707500041870,
      "end": 1707500041870,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1707500041870,
      "end": 1707500041870,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1707500041870,
      "end": 1707500041870,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1707500041870,
      "end": 1707500041870,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1707500041870,
      "end": 1707500041870,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1707500041870,
      "end": 1707500041870,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1707500041870,
      "end": 1707500041870,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1707500041870,
      "end": 1707500041870,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1707500041870,
      "end": 1707500041870,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707500041870,
      "end": 1707500041870,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1707500041870,
      "end": 1707500041870,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1707500041870,
      "end": 1707500041870,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1707500041870,
      "end": 1707500041870,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707500041870,
      "end": 1707500041870,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1707500041870,
      "end": 1707500041870,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1707500041870,
      "end": 1707500041870,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1707500041870,
      "end": 1707500041870,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1707500041870,
      "end": 1707500041870,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1707500041870,
      "end": 1707500041870,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1707500041870,
      "end": 1707500041870,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1707500041870,
      "end": 1707500041870,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1707500041870,
      "end": 1707500041870,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1707500041870,
      "end": 1707500041870,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1707500041870,
      "end": 1707500041870,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1707500041870,
      "end": 1707500041870,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1707500041870,
      "end": 1707500041871,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1707500041871,
      "end": 1707500041871,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1707500041871,
      "end": 1707500041871,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1707500041871,
      "end": 1707500041871,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1707500041871,
      "end": 1707500041871,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1707500041871,
      "end": 1707500041871,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1707500041871,
      "end": 1707500041871,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1707500041871,
      "end": 1707500041871,
      "order": "normal"
    }
  ]
}
