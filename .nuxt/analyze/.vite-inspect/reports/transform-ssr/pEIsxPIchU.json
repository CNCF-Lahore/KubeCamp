{
  "resolvedId": "/workspace/Kubernetes-Bootcamp/node_modules/@nuxt/content/dist/runtime/transformers/path-meta.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { pascalCase } from \"scule\";\nimport slugify from \"slugify\";\nimport { withoutTrailingSlash, withLeadingSlash } from \"ufo\";\nimport { defineTransformer } from \"./utils.js\";\nconst SEMVER_REGEX = /^(\\d+)(\\.\\d+)*(\\.x)?$/;\nexport const describeId = (id) => {\n  const [_source, ...parts] = id.split(\":\");\n  const [, filename, _extension] = parts[parts.length - 1]?.match(/(.*)\\.([^.]+)$/) || [];\n  if (filename) {\n    parts[parts.length - 1] = filename;\n  }\n  const _path = (parts || []).join(\"/\");\n  return {\n    _source,\n    _path,\n    _extension,\n    _file: _extension ? `${_path}.${_extension}` : _path\n  };\n};\nexport default defineTransformer({\n  name: \"path-meta\",\n  extensions: [\".*\"],\n  transform(content, options = {}) {\n    const { locales = [], defaultLocale = \"en\", respectPathCase = false } = options;\n    const { _source, _file, _path, _extension } = describeId(content._id);\n    const parts = _path.split(\"/\");\n    const _locale = locales.includes(parts[0]) ? parts.shift() : defaultLocale;\n    const filePath = generatePath(parts.join(\"/\"), { respectPathCase });\n    return {\n      _path: filePath,\n      _dir: filePath.split(\"/\").slice(-2)[0],\n      _draft: content._draft ?? isDraft(_path),\n      _partial: isPartial(_path),\n      _locale,\n      ...content,\n      // TODO: move title to Markdown parser\n      title: content.title || generateTitle(refineUrlPart(parts[parts.length - 1])),\n      _source,\n      _file,\n      _extension\n    };\n  }\n});\nconst isDraft = (path) => !!path.match(/\\.draft(\\/|\\.|$)/);\nconst isPartial = (path) => path.split(/[:/]/).some((part) => part.match(/^_.*/));\nexport const generatePath = (path, { forceLeadingSlash = true, respectPathCase = false } = {}) => {\n  path = path.split(\"/\").map((part) => slugify(refineUrlPart(part), { lower: !respectPathCase })).join(\"/\");\n  return forceLeadingSlash ? withLeadingSlash(withoutTrailingSlash(path)) : path;\n};\nexport const generateTitle = (path) => path.split(/[\\s-]/g).map(pascalCase).join(\" \");\nexport function refineUrlPart(name) {\n  name = name.split(/[/:]/).pop();\n  if (SEMVER_REGEX.test(name)) {\n    return name;\n  }\n  return name.replace(/(\\d+\\.)?(.*)/, \"$2\").replace(/^index(\\.draft)?$/, \"\").replace(/\\.draft$/, \"\");\n}\n",
      "start": 1708178214817,
      "end": 1708178215081,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "pre"
    },
    {
      "name": "pinceau-transforms",
      "result": "import { pascalCase } from \"scule\";\nimport slugify from \"slugify\";\nimport { withoutTrailingSlash, withLeadingSlash } from \"ufo\";\nimport { defineTransformer } from \"./utils.js\";\nconst SEMVER_REGEX = /^(\\d+)(\\.\\d+)*(\\.x)?$/;\nexport const describeId = (id) => {\n  const [_source, ...parts] = id.split(\":\");\n  const [, filename, _extension] = parts[parts.length - 1]?.match(/(.*)\\.([^.]+)$/) || [];\n  if (filename) {\n    parts[parts.length - 1] = filename;\n  }\n  const _path = (parts || []).join(\"/\");\n  return {\n    _source,\n    _path,\n    _extension,\n    _file: _extension ? `${_path}.${_extension}` : _path\n  };\n};\nexport default defineTransformer({\n  name: \"path-meta\",\n  extensions: [\".*\"],\n  transform(content, options = {}) {\n    const { locales = [], defaultLocale = \"en\", respectPathCase = false } = options;\n    const { _source, _file, _path, _extension } = describeId(content._id);\n    const parts = _path.split(\"/\");\n    const _locale = locales.includes(parts[0]) ? parts.shift() : defaultLocale;\n    const filePath = generatePath(parts.join(\"/\"), { respectPathCase });\n    return {\n      _path: filePath,\n      _dir: filePath.split(\"/\").slice(-2)[0],\n      _draft: content._draft ?? isDraft(_path),\n      _partial: isPartial(_path),\n      _locale,\n      ...content,\n      // TODO: move title to Markdown parser\n      title: content.title || generateTitle(refineUrlPart(parts[parts.length - 1])),\n      _source,\n      _file,\n      _extension\n    };\n  }\n});\nconst isDraft = (path) => !!path.match(/\\.draft(\\/|\\.|$)/);\nconst isPartial = (path) => path.split(/[:/]/).some((part) => part.match(/^_.*/));\nexport const generatePath = (path, { forceLeadingSlash = true, respectPathCase = false } = {}) => {\n  path = path.split(\"/\").map((part) => slugify(refineUrlPart(part), { lower: !respectPathCase })).join(\"/\");\n  return forceLeadingSlash ? withLeadingSlash(withoutTrailingSlash(path)) : path;\n};\nexport const generateTitle = (path) => path.split(/[\\s-]/g).map(pascalCase).join(\" \");\nexport function refineUrlPart(name) {\n  name = name.split(/[/:]/).pop();\n  if (SEMVER_REGEX.test(name)) {\n    return name;\n  }\n  return name.replace(/(\\d+\\.)?(.*)/, \"$2\").replace(/^index(\\.draft)?$/, \"\").replace(/\\.draft$/, \"\");\n}\n",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "pre"
    },
    {
      "name": "pinceau-transforms",
      "result": "import { pascalCase } from \"scule\";\nimport slugify from \"slugify\";\nimport { withoutTrailingSlash, withLeadingSlash } from \"ufo\";\nimport { defineTransformer } from \"./utils.js\";\nconst SEMVER_REGEX = /^(\\d+)(\\.\\d+)*(\\.x)?$/;\nexport const describeId = (id) => {\n  const [_source, ...parts] = id.split(\":\");\n  const [, filename, _extension] = parts[parts.length - 1]?.match(/(.*)\\.([^.]+)$/) || [];\n  if (filename) {\n    parts[parts.length - 1] = filename;\n  }\n  const _path = (parts || []).join(\"/\");\n  return {\n    _source,\n    _path,\n    _extension,\n    _file: _extension ? `${_path}.${_extension}` : _path\n  };\n};\nexport default defineTransformer({\n  name: \"path-meta\",\n  extensions: [\".*\"],\n  transform(content, options = {}) {\n    const { locales = [], defaultLocale = \"en\", respectPathCase = false } = options;\n    const { _source, _file, _path, _extension } = describeId(content._id);\n    const parts = _path.split(\"/\");\n    const _locale = locales.includes(parts[0]) ? parts.shift() : defaultLocale;\n    const filePath = generatePath(parts.join(\"/\"), { respectPathCase });\n    return {\n      _path: filePath,\n      _dir: filePath.split(\"/\").slice(-2)[0],\n      _draft: content._draft ?? isDraft(_path),\n      _partial: isPartial(_path),\n      _locale,\n      ...content,\n      // TODO: move title to Markdown parser\n      title: content.title || generateTitle(refineUrlPart(parts[parts.length - 1])),\n      _source,\n      _file,\n      _extension\n    };\n  }\n});\nconst isDraft = (path) => !!path.match(/\\.draft(\\/|\\.|$)/);\nconst isPartial = (path) => path.split(/[:/]/).some((part) => part.match(/^_.*/));\nexport const generatePath = (path, { forceLeadingSlash = true, respectPathCase = false } = {}) => {\n  path = path.split(\"/\").map((part) => slugify(refineUrlPart(part), { lower: !respectPathCase })).join(\"/\");\n  return forceLeadingSlash ? withLeadingSlash(withoutTrailingSlash(path)) : path;\n};\nexport const generateTitle = (path) => path.split(/[\\s-]/g).map(pascalCase).join(\" \");\nexport function refineUrlPart(name) {\n  name = name.split(/[/:]/).pop();\n  if (SEMVER_REGEX.test(name)) {\n    return name;\n  }\n  return name.replace(/(\\d+\\.)?(.*)/, \"$2\").replace(/^index(\\.draft)?$/, \"\").replace(/\\.draft$/, \"\");\n}\n",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1708178215082,
      "end": 1708178215082,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1708178215083,
      "end": 1708178215083,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1708178215082,
      "end": 1708178215083,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1708178215083,
      "end": 1708178215083,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1708178215083,
      "end": 1708178215083,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1708178215083,
      "end": 1708178215083,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1708178215083,
      "end": 1708178215083,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1708178215083,
      "end": 1708178215083,
      "order": "normal"
    }
  ]
}
