{
  "resolvedId": "/workspace/Kubernetes-Bootcamp/node_modules/@nuxtjs/mdc/dist/runtime/components/prose/ProseScript.vue?vue&type=script&setup=true&lang.ts",
  "transforms": [
    {
      "name": "vite:vue",
      "result": "import { defineComponent as _defineComponent } from 'vue'\nimport { ssrRenderAttrs as _ssrRenderAttrs } from \"vue/server-renderer\"\n\nimport { computed } from 'vue'\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'ProseScript',\n  __ssrInlineRender: true,\n  props: {\n  src: {\n    type: String,\n    default: ''\n  }\n},\n  setup(__props) {\n\n\nconst isDev = computed(() => process.dev)\n\nreturn (_ctx: any,_push: any,_parent: any,_attrs: any) => {\n  if (isDev.value) {\n    _push(`<div${_ssrRenderAttrs(_attrs)}> Rendering the <code>script</code> element is dangerous and is disabled by default. Consider implementing your own <code>ProseScript</code> element to have control over script rendering. </div>`)\n  } else {\n    _push(`<!---->`)\n  }\n}\n}\n\n})",
      "start": 1708190404497,
      "end": 1708190404497,
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/workspace/Kubernetes-Bootcamp/node_modules/@nuxtjs/mdc/dist/runtime/components/prose/ProseScript.vue"
        ],
        "sourcesContent": [
          "<template>\n  <div v-if=\"isDev\">\n    Rendering the <code>script</code> element is dangerous and is disabled by default. Consider implementing your own <code>ProseScript</code> element to have control over script rendering.\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\n\ndefineProps({\n  src: {\n    type: String,\n    default: ''\n  }\n})\nconst isDev = computed(() => process.dev)\n</script>\n"
        ],
        "names": [],
        "mappings": ";;;AAOA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B;;;;;;;;;;;;AAFwB;AAQtB;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;;;;;;;;;;"
      }
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1708190404498,
      "end": 1708190404498,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1708190404498,
      "end": 1708190404498,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1708190404498,
      "end": 1708190404498,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1708190404498,
      "end": 1708190404498,
      "order": "pre"
    },
    {
      "name": "pinceau-transforms",
      "result": "import { defineComponent as _defineComponent } from 'vue'\nimport { ssrRenderAttrs as _ssrRenderAttrs } from \"vue/server-renderer\"\n\nimport { computed } from 'vue'\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'ProseScript',\n  __ssrInlineRender: true,\n  props: {\n  src: {\n    type: String,\n    default: ''\n  }\n},\n  setup(__props) {\n\n\nconst isDev = computed(() => process.dev)\n\nreturn (_ctx: any,_push: any,_parent: any,_attrs: any) => {\n  if (isDev.value) {\n    _push(`<div${_ssrRenderAttrs(_attrs)}> Rendering the <code>script</code> element is dangerous and is disabled by default. Consider implementing your own <code>ProseScript</code> element to have control over script rendering. </div>`)\n  } else {\n    _push(`<!---->`)\n  }\n}\n}\n\n})",
      "start": 1708190404498,
      "end": 1708190404498,
      "order": "pre"
    },
    {
      "name": "pinceau-transforms",
      "result": "import { defineComponent as _defineComponent } from 'vue'\nimport { ssrRenderAttrs as _ssrRenderAttrs } from \"vue/server-renderer\"\n\nimport { computed } from 'vue'\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'ProseScript',\n  __ssrInlineRender: true,\n  props: {\n  src: {\n    type: String,\n    default: ''\n  }\n},\n  setup(__props) {\n\n\nconst isDev = computed(() => process.dev)\n\nreturn (_ctx: any,_push: any,_parent: any,_attrs: any) => {\n  if (isDev.value) {\n    _push(`<div${_ssrRenderAttrs(_attrs)}> Rendering the <code>script</code> element is dangerous and is disabled by default. Consider implementing your own <code>ProseScript</code> element to have control over script rendering. </div>`)\n  } else {\n    _push(`<!---->`)\n  }\n}\n}\n\n})",
      "start": 1708190404498,
      "end": 1708190404498,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1708190404498,
      "end": 1708190404498,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1708190404498,
      "end": 1708190404498,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1708190404498,
      "end": 1708190404498,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1708190404498,
      "end": 1708190404498,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "result": "import { defineComponent as _defineComponent } from \"vue\";\nimport { ssrRenderAttrs as _ssrRenderAttrs } from \"vue/server-renderer\";\nimport { computed } from \"vue\";\nexport default /* @__PURE__ */ _defineComponent({\n  __name: \"ProseScript\",\n  __ssrInlineRender: true,\n  props: {\n    src: {\n      type: String,\n      default: \"\"\n    }\n  },\n  setup(__props) {\n    const isDev = computed(() => process.dev);\n    return (_ctx, _push, _parent, _attrs) => {\n      if (isDev.value) {\n        _push(`<div${_ssrRenderAttrs(_attrs)}> Rendering the <code>script</code> element is dangerous and is disabled by default. Consider implementing your own <code>ProseScript</code> element to have control over script rendering. </div>`);\n      } else {\n        _push(`<!---->`);\n      }\n    };\n  }\n});\n",
      "start": 1708190404498,
      "end": 1708190404541,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/workspace/Kubernetes-Bootcamp/node_modules/@nuxtjs/mdc/dist/runtime/components/prose/ProseScript.vue?vue&type=script&setup=true&lang.ts"
        ],
        "sourcesContent": [
          "import { defineComponent as _defineComponent } from 'vue'\nimport { ssrRenderAttrs as _ssrRenderAttrs } from \"vue/server-renderer\"\n\nimport { computed } from 'vue'\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'ProseScript',\n  __ssrInlineRender: true,\n  props: {\n  src: {\n    type: String,\n    default: ''\n  }\n},\n  setup(__props) {\n\n\nconst isDev = computed(() => process.dev)\n\nreturn (_ctx: any,_push: any,_parent: any,_attrs: any) => {\n  if (isDev.value) {\n    _push(`<div${_ssrRenderAttrs(_attrs)}> Rendering the <code>script</code> element is dangerous and is disabled by default. Consider implementing your own <code>ProseScript</code> element to have control over script rendering. </div>`)\n  } else {\n    _push(`<!---->`)\n  }\n}\n}\n\n})"
        ],
        "mappings": "AAAA,SAAS,mBAAmB,wBAAwB;AACpD,SAAS,kBAAkB,uBAAuB;AAElD,SAAS,gBAAgB;AAGzB,eAA4B,iCAAiB;AAAA,EAC3C,QAAQ;AAAA,EACR,mBAAmB;AAAA,EACnB,OAAO;AAAA,IACP,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,EACF;AAAA,EACE,MAAM,SAAS;AAGjB,UAAM,QAAQ,SAAS,MAAM,QAAQ,GAAG;AAExC,WAAO,CAAC,MAAU,OAAW,SAAa,WAAgB;AACxD,UAAI,MAAM,OAAO;AACf,cAAM,OAAO,gBAAgB,MAAM,CAAC,oMAAoM;AAAA,MAC1O,OAAO;AACL,cAAM,SAAS;AAAA,MACjB;AAAA,IACF;AAAA,EACA;AAEA,CAAC;",
        "names": []
      }
    },
    {
      "name": "vite:json",
      "start": 1708190404541,
      "end": 1708190404541,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1708190404542,
      "end": 1708190404542,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1708190404542,
      "end": 1708190404542,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1708190404542,
      "end": 1708190404542,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1708190404542,
      "end": 1708190404544,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1708190404542,
      "end": 1708190404544,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1708190404544,
      "end": 1708190404544,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1708190404544,
      "end": 1708190404544,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1708190404544,
      "end": 1708190404544,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1708190404544,
      "end": 1708190404544,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1708190404545,
      "end": 1708190404545,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { defineComponent as _defineComponent } from \"vue\";\nimport { ssrRenderAttrs as _ssrRenderAttrs } from \"vue/server-renderer\";\nimport { computed } from \"vue\";\nexport default /* @__PURE__ */ _defineComponent({\n  __name: \"ProseScript\",\n  __ssrInlineRender: true,\n  props: {\n    src: {\n      type: String,\n      default: \"\"\n    }\n  },\n  setup(__props) {\n    const isDev = computed(() => false);\n    return (_ctx, _push, _parent, _attrs) => {\n      if (isDev.value) {\n        _push(`<div${_ssrRenderAttrs(_attrs)}> Rendering the <code>script</code> element is dangerous and is disabled by default. Consider implementing your own <code>ProseScript</code> element to have control over script rendering. </div>`);\n      } else {\n        _push(`<!---->`);\n      }\n    };\n  }\n});\n",
      "start": 1708190404546,
      "end": 1708190404564,
      "order": "normal",
      "sourcemaps": "{\n  \"version\": 3,\n  \"sources\": [\"/workspace/Kubernetes-Bootcamp/node_modules/@nuxtjs/mdc/dist/runtime/components/prose/ProseScript.vue?vue&type=script&setup=true&lang.ts\"],\n  \"sourcesContent\": [\"import { defineComponent as _defineComponent } from \\\"vue\\\";\\nimport { ssrRenderAttrs as _ssrRenderAttrs } from \\\"vue/server-renderer\\\";\\nimport { computed } from \\\"vue\\\";\\nexport default /* @__PURE__ */ _defineComponent({\\n  __name: \\\"ProseScript\\\",\\n  __ssrInlineRender: true,\\n  props: {\\n    src: {\\n      type: String,\\n      default: \\\"\\\"\\n    }\\n  },\\n  setup(__props) {\\n    const isDev = computed(() => process.dev);\\n    return (_ctx, _push, _parent, _attrs) => {\\n      if (isDev.value) {\\n        _push(`<div${_ssrRenderAttrs(_attrs)}> Rendering the <code>script</code> element is dangerous and is disabled by default. Consider implementing your own <code>ProseScript</code> element to have control over script rendering. </div>`);\\n      } else {\\n        _push(`<!---->`);\\n      }\\n    };\\n  }\\n});\\n\"],\n  \"mappings\": \"AAAA,SAAS,mBAAmB,wBAAwB;AACpD,SAAS,kBAAkB,uBAAuB;AAClD,SAAS,gBAAgB;AACzB,eAA+B,iCAAiB;AAAA,EAC9C,QAAQ;AAAA,EACR,mBAAmB;AAAA,EACnB,OAAO;AAAA,IACL,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,EACF;AAAA,EACA,MAAM,SAAS;AACb,UAAM,QAAQ,SAAS,MAAM,KAAW;AACxC,WAAO,CAAC,MAAM,OAAO,SAAS,WAAW;AACvC,UAAI,MAAM,OAAO;AACf,cAAM,OAAO,gBAAgB,MAAM,CAAC,oMAAoM;AAAA,MAC1O,OAAO;AACL,cAAM,SAAS;AAAA,MACjB;AAAA,IACF;AAAA,EACF;AACF,CAAC;\",\n  \"names\": []\n}\n"
    },
    {
      "name": "vite:css-post",
      "start": 1708190404564,
      "end": 1708190404564,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1708190404564,
      "end": 1708190404564,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1708190404564,
      "end": 1708190404564,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1708190404564,
      "end": 1708190404564,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1708190404564,
      "end": 1708190404564,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1708190404564,
      "end": 1708190404564,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1708190404564,
      "end": 1708190404564,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1708190404564,
      "end": 1708190404564,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1708190404564,
      "end": 1708190404564,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1708190404564,
      "end": 1708190404564,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1708190404564,
      "end": 1708190404564,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1708190404565,
      "end": 1708190404565,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1708190404565,
      "end": 1708190404565,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1708190404565,
      "end": 1708190404565,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1708190404565,
      "end": 1708190404565,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1708190404565,
      "end": 1708190404565,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1708190404565,
      "end": 1708190404565,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1708190404565,
      "end": 1708190404565,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1708190404565,
      "end": 1708190404565,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1708190404565,
      "end": 1708190404565,
      "order": "normal"
    }
  ]
}
